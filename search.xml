<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello wworld</title>
    <url>/2025/04/09/helloworld/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>代码001</title>
    <url>/2025/04/10/hdh/</url>
    <content><![CDATA[<h2 id="TO"><a href="#TO" class="headerlink" title="TO"></a>TO</h2><h5 id="fgf"><a href="#fgf" class="headerlink" title="fgf"></a>fgf</h5><h2 id="fsfs"><a href="#fsfs" class="headerlink" title="fsfs"></a>fsfs</h2><h3 id="fgd"><a href="#fgd" class="headerlink" title="fgd"></a>fgd</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">z</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>nand2tetris-proj1-final</title>
    <url>/2025/04/19/nand2tetris-proj1-final/</url>
    <content><![CDATA[<h2 id="Proj1"><a href="#Proj1" class="headerlink" title="Proj1"></a>Proj1</h2><h3 id="1-1-Boolean-Logic"><a href="#1-1-Boolean-Logic" class="headerlink" title="1.1 Boolean Logic"></a>1.1 Boolean Logic</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404141214589.png" alt="image-20250404141214589"></p>
<p>⭐<strong>Some useful equations</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404141414517.png" alt="image-20250404141414517"></p>
<p><strong>→Boolean Algebra  can be 化简</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404141608949.png" alt="image-20250404141608949"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404141759670.png" alt="image-20250404141759670"></p>
<p>（Two way : ①equations,②write down the truth table)</p>
<h3 id="1-2-Boolean-Function"><a href="#1-2-Boolean-Function" class="headerlink" title="1.2 Boolean Function"></a>1.2 Boolean Function</h3><h4 id="001："><a href="#001：" class="headerlink" title="001："></a>001：</h4><ul>
<li><strong>理论上，任何布尔函数都可以用NotAndOr等表示出来（通过真值表选取f&#x3D;1的情况）（做芯片有用）</strong></li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404142330760.png" alt="image-20250404142330760"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404142531366.png" alt="image-20250404142531366"></p>
<h4 id="002："><a href="#002：" class="headerlink" title="002："></a>002：</h4><ul>
<li><strong>（or可以通过And和Not表示）</strong></li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404142856026.png" alt="image-20250404142856026"></p>
<h4 id="003："><a href="#003：" class="headerlink" title="003："></a>003：</h4><ul>
<li><strong>而Nand可以表示出AndNot芯片（根本的根本）</strong></li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404142922081.png" alt="image-20250404142922081"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404144646895.png" alt="image-20250404144646895"></p>
<h3 id="1-3-Logic-Gates"><a href="#1-3-Logic-Gates" class="headerlink" title="1.3 Logic Gates"></a>1.3 Logic Gates</h3><p><em>上一节是抽象的逻辑运算，这一节是<strong>实际的</strong>芯片&#x2F;逻辑门</em></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404145506478.png" alt="image-20250404145506478"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404145701379.png" alt="image-20250404145701379"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404145744036.png" alt="image-20250404145744036"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404145815647.png" alt="image-20250404145815647"></p>
<p><strong>一个接口，可以有不同的实现</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404150147322.png" alt="image-20250404150147322"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404150426261.png" alt="image-20250404150426261"></p>
<h3 id="1-4-Hardware-Description-Language"><a href="#1-4-Hardware-Description-Language" class="headerlink" title="1.4 Hardware Description Language"></a>1.4 Hardware Description Language</h3><p><strong>一种硬件描述语言（做硬件&#x2F;芯片用的）</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404150718865.png" alt="image-20250404150718865"></p>
<p><strong>芯片接口 和 芯片实现</strong></p>
<p>⭐<strong>实现：用真值表看1，写出布尔函数化简，画出逻辑图</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404151805805.png" alt="image-20250404151805805"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404152954069.png" alt="image-20250404152954069"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404153644134.png" alt="image-20250404153644134"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404154013569.png" alt="image-20250404154013569"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404154041022.png" alt="image-20250404154041022"></p>
<h3 id="1-5-Hardware-Simulation"><a href="#1-5-Hardware-Simulation" class="headerlink" title="1.5 Hardware Simulation"></a>1.5 Hardware Simulation</h3><ul>
<li><strong>for 模拟芯片测试</strong><ul>
<li>way：在给定的硬件模拟器中 + 使用编写的测试文件</li>
</ul>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404160947915.png" alt="image-20250404160947915"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404163421803.png" alt="image-20250404163421803"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404170858647.png" alt="image-20250404170858647"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404172732071.png" alt="image-20250404172732071"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404172955446.png" alt="image-20250404172955446"></p>
<h3 id="1-6-Mutil-bit-Buses"><a href="#1-6-Mutil-bit-Buses" class="headerlink" title="1.6 Mutil-bit Buses"></a>1.6 Mutil-bit Buses</h3><p><strong>多位总线（eg16位总线，一条线上有16个位bit）</strong></p>
<p>（最左边第一位是高位。 最右边的最低位一般标记为第 0 位）</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404202521312.png" alt="image-20250404202521312"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404202530048.png" alt="image-20250404202530048"></p>
<p><strong>⭐ useful</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404202602223.png" alt="image-20250404202602223"></p>
<p>说明中第一句的意思是：<strong>可以进行多个output，比如前8位输出，后八位输出，全部输出</strong></p>
<h3 id="1-7-proj-7-preview"><a href="#1-7-proj-7-preview" class="headerlink" title="1.7 proj 7  preview"></a>1.7 proj 7  preview</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404202849141.png" alt="image-20250404202849141"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404202926080.png" alt="image-20250404202926080"></p>
<p><strong>tip几个</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404203025658.png" alt="image-20250404203025658"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404203159712.png" alt="image-20250404203159712"></p>
<p>（既可以用作And门，也可以用作Mux门）</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404203425278.png" alt="image-20250404203425278"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404204239746.png" alt="image-20250404204239746"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404204625628.png" alt="image-20250404204625628"></p>
<p><strong>And 16 ： 两个输入，都是16位的，一个输出（每位进行And运算），也是十六位的</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404204739365.png" alt="image-20250404204739365"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404204849942.png" alt="image-20250404204849942"></p>
<p><strong>16-bit，4way multiplexor : 输入都是16位的，4个输入，一个16bit输出（mux逻辑，根据which sel进行选择）。</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404205018344.png" alt="image-20250404205018344"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404205126035.png" alt="image-20250404205126035"></p>
<p>⭐ <strong>notes</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404210112492.png" alt="image-20250404210112492"></p>
<p> <strong>API</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404211743753.png" alt="image-20250404211743753"></p>
<h3 id="1-8-code"><a href="#1-8-code" class="headerlink" title="1.8 code"></a>1.8 code</h3><h4 id="Nand"><a href="#Nand" class="headerlink" title="Nand"></a>Nand</h4><table>
<thead>
<tr>
<th>x</th>
<th>y</th>
<th>out</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<h4 id="Not"><a href="#Not" class="headerlink" title="Not"></a>Not</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Not gate : if (in) out = 0, else out = 1</span><br><span class="line"></span><br><span class="line">CHIP Not &#123;</span><br><span class="line">    IN in;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Nand(a=in, b=in, out=out);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="And"><a href="#And" class="headerlink" title="And"></a>And</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// And gate : if (a and b) out = 1, else out = 0 </span><br><span class="line"></span><br><span class="line">CHIP And &#123;</span><br><span class="line">    IN a, b;</span><br><span class="line">    OUT out;</span><br><span class="line">    </span><br><span class="line">    PARTS:</span><br><span class="line">    Nand(a=a, b=b, out=c);</span><br><span class="line">    Not(in=c,out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Or"><a href="#Or" class="headerlink" title="Or"></a>Or</h4><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/b75694b72e0957867d154be60f9a207.jpg" alt="b75694b72e0957867d154be60f9a207" style="zoom:10%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Or gate : if (a or b) out = 1, else out = 0 </span><br><span class="line">// only a=0,b=0,out=0,else out=1</span><br><span class="line"></span><br><span class="line">CHIP Or &#123;</span><br><span class="line">    IN a, b;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Nand(a=a, b=a, out=a2);</span><br><span class="line">    Nand(a=b, b=b, out=b2);</span><br><span class="line">    Nand(a=a2, b=b2,out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Xor"><a href="#Xor" class="headerlink" title="Xor"></a>Xor</h4><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/14c146587d40e107bec5f52c50fc019.jpg" alt="14c146587d40e107bec5f52c50fc019" style="zoom:12%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Exclusive-or gate: if ((a and Not(b)) or (Not(a) and b)) out = 1, else out = 0</span><br><span class="line"></span><br><span class="line">CHIP Xor &#123;</span><br><span class="line">    IN a, b;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    ////真值表推出来的(定义也写明了哈哈哈)</span><br><span class="line">    Not(in=a, out=nota);</span><br><span class="line">    Not(in=b, out=notb);</span><br><span class="line">    And(a=a, b=notb, out=aAndnotb);</span><br><span class="line">    And(a=b, b=nota, out=bAndnota);</span><br><span class="line">    Or(a=aAndnotb, b=bAndnota, out=out);</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<h4 id="Mux（二1bit并一）"><a href="#Mux（二1bit并一）" class="headerlink" title="Mux（二1bit并一）"></a>Mux（二1bit并一）</h4><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/bb2b12af45a30fae8396224ade119a7.jpg" alt="bb2b12af45a30fae8396224ade119a7" style="zoom:11%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Multiplexor: if (sel = 0) out = a, else out = b  (good!)</span><br><span class="line"></span><br><span class="line">CHIP Mux &#123;</span><br><span class="line">    IN a, b, sel;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Not(in=sel, out=notsel); </span><br><span class="line">    And(a=a , b=notsel, out=outa);//if sel==0,返回a (depend on a)</span><br><span class="line">    And(a=sel, b=b, out=outb ); //if sel==1，返回b (depend on b)</span><br><span class="line">    Or(a=outa, b=outb, out=out );   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Dmux（一解二）"><a href="#Dmux（一解二）" class="headerlink" title="Dmux（一解二）"></a>Dmux（一解二）</h4><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/1c6ff7a10f0431156d30ca2e457635b.jpg" alt="1c6ff7a10f0431156d30ca2e457635b" style="zoom:12%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Demultiplexor: [a, b] = 		[in, 0] if sel = 0 		[0, in] if sel = 1</span><br><span class="line"></span><br><span class="line">CHIP DMux &#123;</span><br><span class="line">    IN in, sel;</span><br><span class="line">    OUT a, b;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Not(in=sel , out=notsel );</span><br><span class="line">    And(a=in, b=notsel, out=a );</span><br><span class="line">    And(a=in, b=sel , out=b ); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Not16"><a href="#Not16" class="headerlink" title="Not16"></a>Not16</h4><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/2888a1bdd8c56821dc4950f143b6396.jpg" alt="2888a1bdd8c56821dc4950f143b6396" style="zoom:15%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 16-bit Not gate:		for i = 0, ..., 15: 	out[i] = Not(a[i])</span><br><span class="line"> </span><br><span class="line">// 把一个16位的数，每一位都取反</span><br><span class="line">CHIP Not16 &#123;</span><br><span class="line">    IN in[16];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Not(in=in[0] , out=out[0] );</span><br><span class="line">    Not(in=in[1] , out=out[1] );</span><br><span class="line">    Not(in=in[2] , out=out[2] );</span><br><span class="line">    Not(in=in[3] , out=out[3] );</span><br><span class="line">    Not(in=in[4] , out=out[4] );</span><br><span class="line">    Not(in=in[5] , out=out[5] );</span><br><span class="line">    Not(in=in[6] , out=out[6] );</span><br><span class="line">    Not(in=in[7] , out=out[7] );</span><br><span class="line">    Not(in=in[8] , out=out[8] );</span><br><span class="line">    Not(in=in[9] , out=out[9] );</span><br><span class="line">    Not(in=in[10] , out=out[10] );</span><br><span class="line">    Not(in=in[11] , out=out[11] );</span><br><span class="line">    Not(in=in[12] , out=out[12] );</span><br><span class="line">    Not(in=in[13] , out=out[13] );</span><br><span class="line">    Not(in=in[14] , out=out[14] );</span><br><span class="line">    Not(in=in[15] , out=out[15] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="And16"><a href="#And16" class="headerlink" title="And16"></a>And16</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 16-bit And gate: 	for i = 0, ..., 15: 	out[i] = a[i] And b[i] </span><br><span class="line"></span><br><span class="line">// 把两个16位的数，每一位都求And</span><br><span class="line">CHIP And16 &#123;</span><br><span class="line">    IN a[16], b[16];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    //// Replace this comment with your code.</span><br><span class="line">    And(a=a[0] , b=b[0] , out=out[0] );</span><br><span class="line">    And(a=a[1] , b=b[1] , out=out[1] );</span><br><span class="line">    And(a=a[2] , b=b[2] , out=out[2] );</span><br><span class="line">    And(a=a[3] , b=b[3] , out=out[3] );</span><br><span class="line">    And(a=a[4] , b=b[4] , out=out[4] );</span><br><span class="line">    And(a=a[5] , b=b[5] , out=out[5] );</span><br><span class="line">    And(a=a[6] , b=b[6] , out=out[6] );</span><br><span class="line">    And(a=a[7] , b=b[7] , out=out[7] );</span><br><span class="line">    And(a=a[8] , b=b[8] , out=out[8] );</span><br><span class="line">    And(a=a[9] , b=b[9] , out=out[9] );</span><br><span class="line">    And(a=a[10] , b=b[10] , out=out[10] );</span><br><span class="line">    And(a=a[11] , b=b[11] , out=out[11] );</span><br><span class="line">    And(a=a[12] , b=b[12] , out=out[12] );</span><br><span class="line">    And(a=a[13] , b=b[13] , out=out[13] );</span><br><span class="line">    And(a=a[14] , b=b[14] , out=out[14] );</span><br><span class="line">    And(a=a[15] , b=b[15] , out=out[15] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Or16"><a href="#Or16" class="headerlink" title="Or16"></a>Or16</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 16-bit Or gate: 		for i = 0, ..., 15: 	out[i] = a[i] Or b[i] </span><br><span class="line"></span><br><span class="line">CHIP Or16 &#123;</span><br><span class="line">    IN a[16], b[16];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Or(a=a[0] , b=b[0] , out=out[0] );</span><br><span class="line">    Or(a=a[1] , b=b[1] , out=out[1] );</span><br><span class="line">    Or(a=a[2] , b=b[2] , out=out[2] );</span><br><span class="line">    Or(a=a[3] , b=b[3] , out=out[3] );</span><br><span class="line">    Or(a=a[4] , b=b[4] , out=out[4] );</span><br><span class="line">    Or(a=a[5] , b=b[5] , out=out[5] );</span><br><span class="line">    Or(a=a[6] , b=b[6] , out=out[6] );</span><br><span class="line">    Or(a=a[7] , b=b[7] , out=out[7] );</span><br><span class="line">    Or(a=a[8] , b=b[8] , out=out[8] );</span><br><span class="line">    Or(a=a[9] , b=b[9] , out=out[9] );</span><br><span class="line">    Or(a=a[10] , b=b[10] , out=out[10] );</span><br><span class="line">    Or(a=a[11] , b=b[11] , out=out[11] );</span><br><span class="line">    Or(a=a[12] , b=b[12] , out=out[12] );</span><br><span class="line">    Or(a=a[13] , b=b[13] , out=out[13] );</span><br><span class="line">    Or(a=a[14] , b=b[14] , out=out[14] );</span><br><span class="line">    Or(a=a[15] , b=b[15] , out=out[15] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Mux16（二16bit并一）"><a href="#Mux16（二16bit并一）" class="headerlink" title="Mux16（二16bit并一）"></a>Mux16（二16bit并一）</h4><ul>
<li>实现方式：16个Mux并排作用与每一个bit</li>
</ul>
<img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/e37fe587999c0d2944e788df5cbfd59.jpg" alt="e37fe587999c0d2944e788df5cbfd59" style="zoom:13%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 16-bit multiplexor: 		for i = 0, ..., 15:	   if (sel = 0) out[i] = a[i], else out[i] = b[i]</span><br><span class="line"></span><br><span class="line">CHIP Mux16 &#123;</span><br><span class="line">    IN a[16], b[16], sel;</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Not(in=sel , out=notsel );</span><br><span class="line"></span><br><span class="line">    And(a=a[0] , b=notsel , out=out01 );</span><br><span class="line">    And(a=sel , b=b[0] , out=out02 );</span><br><span class="line">    Or(a=out01 , b=out02 , out=out[0] );</span><br><span class="line"></span><br><span class="line">    And(a=a[1] , b=notsel , out=out11 );</span><br><span class="line">    And(a=sel , b=b[1] , out=out12 );</span><br><span class="line">    Or(a=out11 , b=out12 , out=out[1] );</span><br><span class="line"></span><br><span class="line">    And(a=a[2] , b=notsel , out=out21 );</span><br><span class="line">    And(a=sel , b=b[2] , out=out22 );</span><br><span class="line">    Or(a=out21 , b=out22 , out=out[2] );</span><br><span class="line"></span><br><span class="line">    And(a=a[3] , b=notsel , out=out31 );</span><br><span class="line">    And(a=sel , b=b[3] , out=out32 );</span><br><span class="line">    Or(a=out31 , b=out32 , out=out[3] );</span><br><span class="line"></span><br><span class="line">    And(a=a[4] , b=notsel , out=out41 );</span><br><span class="line">    And(a=sel , b=b[4] , out=out42 );</span><br><span class="line">    Or(a=out41 , b=out42 , out=out[4] );</span><br><span class="line"></span><br><span class="line">    And(a=a[5] , b=notsel , out=out51 );</span><br><span class="line">    And(a=sel , b=b[5] , out=out52 );</span><br><span class="line">    Or(a=out51 , b=out52 , out=out[5] );</span><br><span class="line"></span><br><span class="line">    And(a=a[6] , b=notsel , out=out61 );</span><br><span class="line">    And(a=sel , b=b[6] , out=out62 );</span><br><span class="line">    Or(a=out61 , b=out62 , out=out[6] );</span><br><span class="line"></span><br><span class="line">    And(a=a[7] , b=notsel , out=out71 );</span><br><span class="line">    And(a=sel , b=b[7] , out=out72 );</span><br><span class="line">    Or(a=out71 , b=out72 , out=out[7] );</span><br><span class="line"></span><br><span class="line">    And(a=a[8] , b=notsel , out=out81 );</span><br><span class="line">    And(a=sel , b=b[8] , out=out82 );</span><br><span class="line">    Or(a=out81 , b=out82 , out=out[8] );</span><br><span class="line"></span><br><span class="line">    And(a=a[9] , b=notsel , out=out91 );</span><br><span class="line">    And(a=sel , b=b[9] , out=out92 );</span><br><span class="line">    Or(a=out91 , b=out92 , out=out[9] );</span><br><span class="line"></span><br><span class="line">    And(a=a[10] , b=notsel , out=out101 );</span><br><span class="line">    And(a=sel , b=b[10] , out=out102 );</span><br><span class="line">    Or(a=out101 , b=out102 , out=out[10] );</span><br><span class="line"></span><br><span class="line">    And(a=a[11] , b=notsel , out=out111 );</span><br><span class="line">    And(a=sel , b=b[11] , out=out112 );</span><br><span class="line">    Or(a=out111 , b=out112 , out=out[11] );</span><br><span class="line"></span><br><span class="line">    And(a=a[12] , b=notsel , out=out121 );</span><br><span class="line">    And(a=sel , b=b[12] , out=out122 );</span><br><span class="line">    Or(a=out121 , b=out122 , out=out[12] );</span><br><span class="line"></span><br><span class="line">    And(a=a[13] , b=notsel , out=out131 );</span><br><span class="line">    And(a=sel , b=b[13] , out=out132 );</span><br><span class="line">    Or(a=out131 , b=out132 , out=out[13] );</span><br><span class="line"></span><br><span class="line">    And(a=a[14] , b=notsel , out=out141 );</span><br><span class="line">    And(a=sel , b=b[14] , out=out142 );</span><br><span class="line">    Or(a=out141 , b=out142 , out=out[14] );</span><br><span class="line"></span><br><span class="line">    And(a=a[15] , b=notsel , out=out151 );</span><br><span class="line">    And(a=sel , b=b[15] , out=out152 );</span><br><span class="line">    Or(a=out151 , b=out152 , out=out[15] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Or8Way"><a href="#Or8Way" class="headerlink" title="Or8Way"></a>Or8Way</h4><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/1113aa3384d980cf7a3cf7c22f999ea.jpg" alt="1113aa3384d980cf7a3cf7c22f999ea" style="zoom:11%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 8-way Or gate！  		out = in[0] Or in[1] Or ... Or in[7]</span><br><span class="line">// 输入 一个 8-bit数！而不是 两个 ！输出一个1-bit数。</span><br><span class="line"></span><br><span class="line">CHIP Or8Way &#123;</span><br><span class="line">    IN in[8];</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // 输入一个八位（bit）数，依次每两位取Or，最后输出结果（全0才会输出0，有一个1就输出1）</span><br><span class="line">    Or(a=in[0] , b=in[1] , out=s1 );</span><br><span class="line">    Or(a=in[2] , b=in[3] , out=s2 );</span><br><span class="line">    Or(a=in[4] , b=in[5] , out=s3 );</span><br><span class="line">    Or(a=in[6] , b=in[7] , out=s4 );</span><br><span class="line">    Or(a=s1 , b=s2 , out=w1 );</span><br><span class="line">    Or(a=s3 , b=s4 , out=w2 );</span><br><span class="line">    Or(a=w1 , b=w2 , out=out );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Mux4Way16（四16bit并一）"><a href="#Mux4Way16（四16bit并一）" class="headerlink" title="Mux4Way16（四16bit并一）"></a>Mux4Way16（四16bit并一）</h4><ul>
<li><p>解析名字含义：</p>
<ul>
<li><p><strong>Mux16</strong> 是 <strong>16-bit</strong> 的意思。</p>
</li>
<li><p><strong>Mux4Way16</strong> 是 <strong>16-bit，4-way</strong> 的意思</p>
</li>
<li><p>那为啥 Or8Way 是 8-bit，1-way？的意思？</p>
</li>
</ul>
</li>
</ul>
<img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/412c8358a3261cc20cca4fb7d9437aa.jpg" alt="412c8358a3261cc20cca4fb7d9437aa" style="zoom:11%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 4-way 16-bit multiplexor:</span><br><span class="line"> * out = a if sel = 00</span><br><span class="line"> *       b if sel = 01</span><br><span class="line"> *       c if sel = 10</span><br><span class="line"> *       d if sel = 11</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">// 四条路/输入，每个都是16bit，根据sel的不同（4个sel，两位的二进制数字），输出其中 一 个数。</span><br><span class="line">CHIP Mux4Way16 &#123; 							// 看成 Mux 16 ，把 4Way 插在名字中间</span><br><span class="line">    IN a[16], b[16], c[16], d[16], sel[2];</span><br><span class="line">    OUT out[16];</span><br><span class="line">    </span><br><span class="line">    PARTS:</span><br><span class="line">    // we just need one output !</span><br><span class="line">    Mux16(a=a , b=b , sel=sel[0] , out=w1 );   // [0]是最右</span><br><span class="line">    Mux16(a=c , b=d , sel=sel[0] , out=w2 );</span><br><span class="line"></span><br><span class="line">    Mux16(a=w1 , b=w2 , sel=sel[1] , out=out );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Mux8Way16（八16bit并一）"><a href="#Mux8Way16（八16bit并一）" class="headerlink" title="Mux8Way16（八16bit并一）"></a>Mux8Way16（八16bit并一）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 8-way 16-bit multiplexor:</span><br><span class="line"> * out = a if sel = 000</span><br><span class="line"> *       b if sel = 001</span><br><span class="line"> *       c if sel = 010</span><br><span class="line"> *       d if sel = 011</span><br><span class="line"> *       e if sel = 100</span><br><span class="line"> *       f if sel = 101</span><br><span class="line"> *       g if sel = 110</span><br><span class="line"> *       h if sel = 111</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// 8条路/输入，每个都是16bit，根据sel的不同（8个sel，三位的二进制数字），输出其中 一 个数。</span><br><span class="line">CHIP Mux8Way16 &#123;</span><br><span class="line">    IN a[16], b[16], c[16], d[16],</span><br><span class="line">       e[16], f[16], g[16], h[16],</span><br><span class="line">       sel[3];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // 用两个Mux4Way16再加上一个Mux16就行了。</span><br><span class="line">    Mux4Way16(a=a , b=b , c=c , d=d , sel[0]=sel[0] ,sel[1]=sel[1],out=w1 );</span><br><span class="line">    Mux4Way16(a=e , b=f , c=g , d=h , sel[0]=sel[0] ,sel[1]=sel[1],out=w2 );</span><br><span class="line">    Mux16(a=w1 , b=w2 , sel=sel[2] , out=out );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="DMux4Way（一解四）"><a href="#DMux4Way（一解四）" class="headerlink" title="DMux4Way（一解四）"></a>DMux4Way（一解四）</h4><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/042760ad0a8f3a0d172d509e6a2462e.jpg" alt="042760ad0a8f3a0d172d509e6a2462e" style="zoom:15%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 4-way demultiplexor:</span><br><span class="line"> * [a, b, c, d] = [in, 0, 0, 0] if sel = 00</span><br><span class="line"> *                [0, in, 0, 0] if sel = 01</span><br><span class="line"> *                [0, 0, in, 0] if sel = 10</span><br><span class="line"> *                [0, 0, 0, in] if sel = 11</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// 一个输入（几bit应该没要求），根据sel的不同选择赋予abcd哪个的值（4个值4Way，需要4个sel），其他值输出0（4个sel，两位二进制数字）</span><br><span class="line">CHIP DMux4Way &#123;</span><br><span class="line">    IN in, sel[2];</span><br><span class="line">    OUT a, b, c, d;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    DMux(in=in, sel=sel[1], a=top, b=bottom);</span><br><span class="line">    </span><br><span class="line">    DMux(in=top, sel=sel[0], a=a, b=b);</span><br><span class="line">    DMux(in=bottom, sel=sel[0], a=c, b=d);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="DMux8Way（一解八）"><a href="#DMux8Way（一解八）" class="headerlink" title="DMux8Way（一解八）"></a>DMux8Way（一解八）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 8-way demultiplexor:</span><br><span class="line"> * [a, b, c, d, e, f, g, h] = [in, 0,  0,  0,  0,  0,  0,  0] if sel = 000</span><br><span class="line"> *                            [0, in,  0,  0,  0,  0,  0,  0] if sel = 001</span><br><span class="line"> *                            [0,  0, in,  0,  0,  0,  0,  0] if sel = 010</span><br><span class="line"> *                            [0,  0,  0, in,  0,  0,  0,  0] if sel = 011</span><br><span class="line"> *                            [0,  0,  0,  0, in,  0,  0,  0] if sel = 100</span><br><span class="line"> *                            [0,  0,  0,  0,  0, in,  0,  0] if sel = 101</span><br><span class="line"> *                            [0,  0,  0,  0,  0,  0, in,  0] if sel = 110</span><br><span class="line"> *                            [0,  0,  0,  0,  0,  0,  0, in] if sel = 111</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">// 根据三位数的sel把in分成8部分</span><br><span class="line">CHIP DMux8Way &#123;</span><br><span class="line">    IN in, sel[3]; </span><br><span class="line">    // sel有8种可能，但打开时，只有一种状态，所以只有一个有值，其他都是0值。</span><br><span class="line">    OUT a, b, c, d, e, f, g, h;</span><br><span class="line">    </span><br><span class="line">    PARTS:</span><br><span class="line">    // 根据sel第一位，把in数据分成两部分，top和bottom</span><br><span class="line">    DMux(in=in, sel=sel[2], a=top, b=bottom);</span><br><span class="line"></span><br><span class="line">    // 根据sel第二位，分别把top和bottom再分成两个部分，总计四部分</span><br><span class="line">    DMux(in=top, sel=sel[1], a=w1, b=w2);</span><br><span class="line">    DMux(in=bottom, sel=sel[1], a=w3, b=w4);</span><br><span class="line"></span><br><span class="line">    // 根据sel第三位，把in总共分成8部分    </span><br><span class="line">    DMux(in=w1, sel=sel[0], a=a, b=b);</span><br><span class="line">    DMux(in=w2, sel=sel[0], a=c, b=d);</span><br><span class="line"></span><br><span class="line">    DMux(in=w3, sel=sel[0], a=e, b=f);</span><br><span class="line">    DMux(in=w4, sel=sel[0], a=g, b=h);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>Hello wworld</title>
    <url>/2025/04/19/text/</url>
    <content><![CDATA[<h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/Rplot05.png"></p>
]]></content>
  </entry>
  <entry>
    <title>LOK</title>
    <url>/2025/04/11/%E5%9B%BE%E7%89%87%E5%90%8D%E5%AD%97/%E5%9B%BE%E7%89%87%E5%90%8D%E5%AD%972/</url>
    <content><![CDATA[<p><img src="https://picsum.photos/id/627/200/300" alt="图片名称八个字"></p>
]]></content>
  </entry>
</search>
