<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>代码001</title>
    <url>/2025/04/10/hdh/</url>
    <content><![CDATA[<h2 id="TO"><a href="#TO" class="headerlink" title="TO"></a>TO</h2><h5 id="fgf"><a href="#fgf" class="headerlink" title="fgf"></a>fgf</h5><h2 id="fsfs"><a href="#fsfs" class="headerlink" title="fsfs"></a>fsfs</h2><h3 id="fgd"><a href="#fgd" class="headerlink" title="fgd"></a>fgd</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">z</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>other</category>
      </categories>
  </entry>
  <entry>
    <title>Hello world</title>
    <url>/2025/04/09/helloworld/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
  </entry>
  <entry>
    <title>ABC</title>
    <url>/2025/05/01/ABC/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>proj1</title>
    <url>/2025/04/19/nand2tetris-proj1-final/</url>
    <content><![CDATA[<h2 id="Proj1"><a href="#Proj1" class="headerlink" title="Proj1"></a>Proj1</h2><h3 id="1-1-Boolean-Logic"><a href="#1-1-Boolean-Logic" class="headerlink" title="1.1 Boolean Logic"></a>1.1 Boolean Logic</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404141214589.png" alt="image-20250404141214589"></p>
<p>⭐<strong>Some useful equations</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404141414517.png" alt="image-20250404141414517"></p>
<p><strong>→Boolean Algebra  can be 化简</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404141608949.png" alt="image-20250404141608949"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404141759670.png" alt="image-20250404141759670"></p>
<p>（Two way : ①equations,②write down the truth table)</p>
<h3 id="1-2-Boolean-Function"><a href="#1-2-Boolean-Function" class="headerlink" title="1.2 Boolean Function"></a>1.2 Boolean Function</h3><h4 id="001："><a href="#001：" class="headerlink" title="001："></a>001：</h4><ul>
<li><strong>理论上，任何布尔函数都可以用NotAndOr等表示出来（通过真值表选取f&#x3D;1的情况）（做芯片有用）</strong></li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404142330760.png" alt="image-20250404142330760"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404142531366.png" alt="image-20250404142531366"></p>
<h4 id="002："><a href="#002：" class="headerlink" title="002："></a>002：</h4><ul>
<li><strong>（or可以通过And和Not表示）</strong></li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404142856026.png" alt="image-20250404142856026"></p>
<h4 id="003："><a href="#003：" class="headerlink" title="003："></a>003：</h4><ul>
<li><strong>而Nand可以表示出AndNot芯片（根本的根本）</strong></li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404142922081.png" alt="image-20250404142922081"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404144646895.png" alt="image-20250404144646895"></p>
<h3 id="1-3-Logic-Gates"><a href="#1-3-Logic-Gates" class="headerlink" title="1.3 Logic Gates"></a>1.3 Logic Gates</h3><p><em>上一节是抽象的逻辑运算，这一节是<strong>实际的</strong>芯片&#x2F;逻辑门</em></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404145506478.png" alt="image-20250404145506478"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404145701379.png" alt="image-20250404145701379"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404145744036.png" alt="image-20250404145744036"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404145815647.png" alt="image-20250404145815647"></p>
<p><strong>一个接口，可以有不同的实现</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404150147322.png" alt="image-20250404150147322"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404150426261.png" alt="image-20250404150426261"></p>
<h3 id="1-4-Hardware-Description-Language"><a href="#1-4-Hardware-Description-Language" class="headerlink" title="1.4 Hardware Description Language"></a>1.4 Hardware Description Language</h3><p><strong>一种硬件描述语言（做硬件&#x2F;芯片用的）</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404150718865.png" alt="image-20250404150718865"></p>
<p><strong>芯片接口 和 芯片实现</strong></p>
<p>⭐<strong>实现：用真值表看1，写出布尔函数化简，画出逻辑图</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404151805805.png" alt="image-20250404151805805"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404152954069.png" alt="image-20250404152954069"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404153644134.png" alt="image-20250404153644134"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404154013569.png" alt="image-20250404154013569"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404154041022.png" alt="image-20250404154041022"></p>
<h3 id="1-5-Hardware-Simulation"><a href="#1-5-Hardware-Simulation" class="headerlink" title="1.5 Hardware Simulation"></a>1.5 Hardware Simulation</h3><ul>
<li><strong>for 模拟芯片测试</strong><ul>
<li>way：在给定的硬件模拟器中 + 使用编写的测试文件</li>
</ul>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404160947915.png" alt="image-20250404160947915"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404163421803.png" alt="image-20250404163421803"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404170858647.png" alt="image-20250404170858647"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404172732071.png" alt="image-20250404172732071"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404172955446.png" alt="image-20250404172955446"></p>
<h3 id="1-6-Mutil-bit-Buses"><a href="#1-6-Mutil-bit-Buses" class="headerlink" title="1.6 Mutil-bit Buses"></a>1.6 Mutil-bit Buses</h3><p><strong>多位总线（eg16位总线，一条线上有16个位bit）</strong></p>
<p>（最左边第一位是高位。 最右边的最低位一般标记为第 0 位）</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404202521312.png" alt="image-20250404202521312"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404202530048.png" alt="image-20250404202530048"></p>
<p><strong>⭐ useful</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404202602223.png" alt="image-20250404202602223"></p>
<p>说明中第一句的意思是：<strong>可以进行多个output，比如前8位输出，后八位输出，全部输出</strong></p>
<h3 id="1-7-proj-7-preview"><a href="#1-7-proj-7-preview" class="headerlink" title="1.7 proj 7  preview"></a>1.7 proj 7  preview</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404202849141.png" alt="image-20250404202849141"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404202926080.png" alt="image-20250404202926080"></p>
<p><strong>tip几个</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404203025658.png" alt="image-20250404203025658"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404203159712.png" alt="image-20250404203159712"></p>
<p>（既可以用作And门，也可以用作Mux门）</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404203425278.png" alt="image-20250404203425278"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404204239746.png" alt="image-20250404204239746"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404204625628.png" alt="image-20250404204625628"></p>
<p><strong>And 16 ： 两个输入，都是16位的，一个输出（每位进行And运算），也是十六位的</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404204739365.png" alt="image-20250404204739365"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404204849942.png" alt="image-20250404204849942"></p>
<p><strong>16-bit，4way multiplexor : 输入都是16位的，4个输入，一个16bit输出（mux逻辑，根据which sel进行选择）。</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404205018344.png" alt="image-20250404205018344"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404205126035.png" alt="image-20250404205126035"></p>
<p>⭐ <strong>notes</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404210112492.png" alt="image-20250404210112492"></p>
<p> <strong>API</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250404211743753.png" alt="image-20250404211743753"></p>
<h3 id="1-8-code"><a href="#1-8-code" class="headerlink" title="1.8 code"></a>1.8 code</h3><h4 id="Nand"><a href="#Nand" class="headerlink" title="Nand"></a>Nand</h4><table>
<thead>
<tr>
<th>x</th>
<th>y</th>
<th>out</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<h4 id="Not"><a href="#Not" class="headerlink" title="Not"></a>Not</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Not gate : if (in) out = 0, else out = 1</span><br><span class="line"></span><br><span class="line">CHIP Not &#123;</span><br><span class="line">    IN in;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Nand(a=in, b=in, out=out);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="And"><a href="#And" class="headerlink" title="And"></a>And</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// And gate : if (a and b) out = 1, else out = 0 </span><br><span class="line"></span><br><span class="line">CHIP And &#123;</span><br><span class="line">    IN a, b;</span><br><span class="line">    OUT out;</span><br><span class="line">    </span><br><span class="line">    PARTS:</span><br><span class="line">    Nand(a=a, b=b, out=c);</span><br><span class="line">    Not(in=c,out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Or"><a href="#Or" class="headerlink" title="Or"></a>Or</h4><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/b75694b72e0957867d154be60f9a207.jpg" alt="b75694b72e0957867d154be60f9a207" style="zoom:10%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Or gate : if (a or b) out = 1, else out = 0 </span><br><span class="line">// only a=0,b=0,out=0,else out=1</span><br><span class="line"></span><br><span class="line">CHIP Or &#123;</span><br><span class="line">    IN a, b;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Nand(a=a, b=a, out=a2);</span><br><span class="line">    Nand(a=b, b=b, out=b2);</span><br><span class="line">    Nand(a=a2, b=b2,out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Xor"><a href="#Xor" class="headerlink" title="Xor"></a>Xor</h4><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/14c146587d40e107bec5f52c50fc019.jpg" alt="14c146587d40e107bec5f52c50fc019" style="zoom:12%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Exclusive-or gate: if ((a and Not(b)) or (Not(a) and b)) out = 1, else out = 0</span><br><span class="line"></span><br><span class="line">CHIP Xor &#123;</span><br><span class="line">    IN a, b;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    ////真值表推出来的(定义也写明了哈哈哈)</span><br><span class="line">    Not(in=a, out=nota);</span><br><span class="line">    Not(in=b, out=notb);</span><br><span class="line">    And(a=a, b=notb, out=aAndnotb);</span><br><span class="line">    And(a=b, b=nota, out=bAndnota);</span><br><span class="line">    Or(a=aAndnotb, b=bAndnota, out=out);</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<h4 id="Mux（二1bit并一）"><a href="#Mux（二1bit并一）" class="headerlink" title="Mux（二1bit并一）"></a>Mux（二1bit并一）</h4><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/bb2b12af45a30fae8396224ade119a7.jpg" alt="bb2b12af45a30fae8396224ade119a7" style="zoom:11%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Multiplexor: if (sel = 0) out = a, else out = b  (good!)</span><br><span class="line"></span><br><span class="line">CHIP Mux &#123;</span><br><span class="line">    IN a, b, sel;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Not(in=sel, out=notsel); </span><br><span class="line">    And(a=a , b=notsel, out=outa);//if sel==0,返回a (depend on a)</span><br><span class="line">    And(a=sel, b=b, out=outb ); //if sel==1，返回b (depend on b)</span><br><span class="line">    Or(a=outa, b=outb, out=out );   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Dmux（一解二）"><a href="#Dmux（一解二）" class="headerlink" title="Dmux（一解二）"></a>Dmux（一解二）</h4><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/1c6ff7a10f0431156d30ca2e457635b.jpg" alt="1c6ff7a10f0431156d30ca2e457635b" style="zoom:12%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Demultiplexor: [a, b] = 		[in, 0] if sel = 0 		[0, in] if sel = 1</span><br><span class="line"></span><br><span class="line">CHIP DMux &#123;</span><br><span class="line">    IN in, sel;</span><br><span class="line">    OUT a, b;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Not(in=sel , out=notsel );</span><br><span class="line">    And(a=in, b=notsel, out=a );</span><br><span class="line">    And(a=in, b=sel , out=b ); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Not16"><a href="#Not16" class="headerlink" title="Not16"></a>Not16</h4><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/2888a1bdd8c56821dc4950f143b6396.jpg" alt="2888a1bdd8c56821dc4950f143b6396" style="zoom:15%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 16-bit Not gate:		for i = 0, ..., 15: 	out[i] = Not(a[i])</span><br><span class="line"> </span><br><span class="line">// 把一个16位的数，每一位都取反</span><br><span class="line">CHIP Not16 &#123;</span><br><span class="line">    IN in[16];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Not(in=in[0] , out=out[0] );</span><br><span class="line">    Not(in=in[1] , out=out[1] );</span><br><span class="line">    Not(in=in[2] , out=out[2] );</span><br><span class="line">    Not(in=in[3] , out=out[3] );</span><br><span class="line">    Not(in=in[4] , out=out[4] );</span><br><span class="line">    Not(in=in[5] , out=out[5] );</span><br><span class="line">    Not(in=in[6] , out=out[6] );</span><br><span class="line">    Not(in=in[7] , out=out[7] );</span><br><span class="line">    Not(in=in[8] , out=out[8] );</span><br><span class="line">    Not(in=in[9] , out=out[9] );</span><br><span class="line">    Not(in=in[10] , out=out[10] );</span><br><span class="line">    Not(in=in[11] , out=out[11] );</span><br><span class="line">    Not(in=in[12] , out=out[12] );</span><br><span class="line">    Not(in=in[13] , out=out[13] );</span><br><span class="line">    Not(in=in[14] , out=out[14] );</span><br><span class="line">    Not(in=in[15] , out=out[15] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="And16"><a href="#And16" class="headerlink" title="And16"></a>And16</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 16-bit And gate: 	for i = 0, ..., 15: 	out[i] = a[i] And b[i] </span><br><span class="line"></span><br><span class="line">// 把两个16位的数，每一位都求And</span><br><span class="line">CHIP And16 &#123;</span><br><span class="line">    IN a[16], b[16];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    //// Replace this comment with your code.</span><br><span class="line">    And(a=a[0] , b=b[0] , out=out[0] );</span><br><span class="line">    And(a=a[1] , b=b[1] , out=out[1] );</span><br><span class="line">    And(a=a[2] , b=b[2] , out=out[2] );</span><br><span class="line">    And(a=a[3] , b=b[3] , out=out[3] );</span><br><span class="line">    And(a=a[4] , b=b[4] , out=out[4] );</span><br><span class="line">    And(a=a[5] , b=b[5] , out=out[5] );</span><br><span class="line">    And(a=a[6] , b=b[6] , out=out[6] );</span><br><span class="line">    And(a=a[7] , b=b[7] , out=out[7] );</span><br><span class="line">    And(a=a[8] , b=b[8] , out=out[8] );</span><br><span class="line">    And(a=a[9] , b=b[9] , out=out[9] );</span><br><span class="line">    And(a=a[10] , b=b[10] , out=out[10] );</span><br><span class="line">    And(a=a[11] , b=b[11] , out=out[11] );</span><br><span class="line">    And(a=a[12] , b=b[12] , out=out[12] );</span><br><span class="line">    And(a=a[13] , b=b[13] , out=out[13] );</span><br><span class="line">    And(a=a[14] , b=b[14] , out=out[14] );</span><br><span class="line">    And(a=a[15] , b=b[15] , out=out[15] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Or16"><a href="#Or16" class="headerlink" title="Or16"></a>Or16</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 16-bit Or gate: 		for i = 0, ..., 15: 	out[i] = a[i] Or b[i] </span><br><span class="line"></span><br><span class="line">CHIP Or16 &#123;</span><br><span class="line">    IN a[16], b[16];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Or(a=a[0] , b=b[0] , out=out[0] );</span><br><span class="line">    Or(a=a[1] , b=b[1] , out=out[1] );</span><br><span class="line">    Or(a=a[2] , b=b[2] , out=out[2] );</span><br><span class="line">    Or(a=a[3] , b=b[3] , out=out[3] );</span><br><span class="line">    Or(a=a[4] , b=b[4] , out=out[4] );</span><br><span class="line">    Or(a=a[5] , b=b[5] , out=out[5] );</span><br><span class="line">    Or(a=a[6] , b=b[6] , out=out[6] );</span><br><span class="line">    Or(a=a[7] , b=b[7] , out=out[7] );</span><br><span class="line">    Or(a=a[8] , b=b[8] , out=out[8] );</span><br><span class="line">    Or(a=a[9] , b=b[9] , out=out[9] );</span><br><span class="line">    Or(a=a[10] , b=b[10] , out=out[10] );</span><br><span class="line">    Or(a=a[11] , b=b[11] , out=out[11] );</span><br><span class="line">    Or(a=a[12] , b=b[12] , out=out[12] );</span><br><span class="line">    Or(a=a[13] , b=b[13] , out=out[13] );</span><br><span class="line">    Or(a=a[14] , b=b[14] , out=out[14] );</span><br><span class="line">    Or(a=a[15] , b=b[15] , out=out[15] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Mux16（二16bit并一）"><a href="#Mux16（二16bit并一）" class="headerlink" title="Mux16（二16bit并一）"></a>Mux16（二16bit并一）</h4><ul>
<li>实现方式：16个Mux并排作用与每一个bit</li>
</ul>
<img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/e37fe587999c0d2944e788df5cbfd59.jpg" alt="e37fe587999c0d2944e788df5cbfd59" style="zoom:13%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 16-bit multiplexor: 		for i = 0, ..., 15:	   if (sel = 0) out[i] = a[i], else out[i] = b[i]</span><br><span class="line"></span><br><span class="line">CHIP Mux16 &#123;</span><br><span class="line">    IN a[16], b[16], sel;</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Not(in=sel , out=notsel );</span><br><span class="line"></span><br><span class="line">    And(a=a[0] , b=notsel , out=out01 );</span><br><span class="line">    And(a=sel , b=b[0] , out=out02 );</span><br><span class="line">    Or(a=out01 , b=out02 , out=out[0] );</span><br><span class="line"></span><br><span class="line">    And(a=a[1] , b=notsel , out=out11 );</span><br><span class="line">    And(a=sel , b=b[1] , out=out12 );</span><br><span class="line">    Or(a=out11 , b=out12 , out=out[1] );</span><br><span class="line"></span><br><span class="line">    And(a=a[2] , b=notsel , out=out21 );</span><br><span class="line">    And(a=sel , b=b[2] , out=out22 );</span><br><span class="line">    Or(a=out21 , b=out22 , out=out[2] );</span><br><span class="line"></span><br><span class="line">    And(a=a[3] , b=notsel , out=out31 );</span><br><span class="line">    And(a=sel , b=b[3] , out=out32 );</span><br><span class="line">    Or(a=out31 , b=out32 , out=out[3] );</span><br><span class="line"></span><br><span class="line">    And(a=a[4] , b=notsel , out=out41 );</span><br><span class="line">    And(a=sel , b=b[4] , out=out42 );</span><br><span class="line">    Or(a=out41 , b=out42 , out=out[4] );</span><br><span class="line"></span><br><span class="line">    And(a=a[5] , b=notsel , out=out51 );</span><br><span class="line">    And(a=sel , b=b[5] , out=out52 );</span><br><span class="line">    Or(a=out51 , b=out52 , out=out[5] );</span><br><span class="line"></span><br><span class="line">    And(a=a[6] , b=notsel , out=out61 );</span><br><span class="line">    And(a=sel , b=b[6] , out=out62 );</span><br><span class="line">    Or(a=out61 , b=out62 , out=out[6] );</span><br><span class="line"></span><br><span class="line">    And(a=a[7] , b=notsel , out=out71 );</span><br><span class="line">    And(a=sel , b=b[7] , out=out72 );</span><br><span class="line">    Or(a=out71 , b=out72 , out=out[7] );</span><br><span class="line"></span><br><span class="line">    And(a=a[8] , b=notsel , out=out81 );</span><br><span class="line">    And(a=sel , b=b[8] , out=out82 );</span><br><span class="line">    Or(a=out81 , b=out82 , out=out[8] );</span><br><span class="line"></span><br><span class="line">    And(a=a[9] , b=notsel , out=out91 );</span><br><span class="line">    And(a=sel , b=b[9] , out=out92 );</span><br><span class="line">    Or(a=out91 , b=out92 , out=out[9] );</span><br><span class="line"></span><br><span class="line">    And(a=a[10] , b=notsel , out=out101 );</span><br><span class="line">    And(a=sel , b=b[10] , out=out102 );</span><br><span class="line">    Or(a=out101 , b=out102 , out=out[10] );</span><br><span class="line"></span><br><span class="line">    And(a=a[11] , b=notsel , out=out111 );</span><br><span class="line">    And(a=sel , b=b[11] , out=out112 );</span><br><span class="line">    Or(a=out111 , b=out112 , out=out[11] );</span><br><span class="line"></span><br><span class="line">    And(a=a[12] , b=notsel , out=out121 );</span><br><span class="line">    And(a=sel , b=b[12] , out=out122 );</span><br><span class="line">    Or(a=out121 , b=out122 , out=out[12] );</span><br><span class="line"></span><br><span class="line">    And(a=a[13] , b=notsel , out=out131 );</span><br><span class="line">    And(a=sel , b=b[13] , out=out132 );</span><br><span class="line">    Or(a=out131 , b=out132 , out=out[13] );</span><br><span class="line"></span><br><span class="line">    And(a=a[14] , b=notsel , out=out141 );</span><br><span class="line">    And(a=sel , b=b[14] , out=out142 );</span><br><span class="line">    Or(a=out141 , b=out142 , out=out[14] );</span><br><span class="line"></span><br><span class="line">    And(a=a[15] , b=notsel , out=out151 );</span><br><span class="line">    And(a=sel , b=b[15] , out=out152 );</span><br><span class="line">    Or(a=out151 , b=out152 , out=out[15] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Or8Way"><a href="#Or8Way" class="headerlink" title="Or8Way"></a>Or8Way</h4><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/1113aa3384d980cf7a3cf7c22f999ea.jpg" alt="1113aa3384d980cf7a3cf7c22f999ea" style="zoom:11%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 8-way Or gate！  		out = in[0] Or in[1] Or ... Or in[7]</span><br><span class="line">// 输入 一个 8-bit数！而不是 两个 ！输出一个1-bit数。</span><br><span class="line"></span><br><span class="line">CHIP Or8Way &#123;</span><br><span class="line">    IN in[8];</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // 输入一个八位（bit）数，依次每两位取Or，最后输出结果（全0才会输出0，有一个1就输出1）</span><br><span class="line">    Or(a=in[0] , b=in[1] , out=s1 );</span><br><span class="line">    Or(a=in[2] , b=in[3] , out=s2 );</span><br><span class="line">    Or(a=in[4] , b=in[5] , out=s3 );</span><br><span class="line">    Or(a=in[6] , b=in[7] , out=s4 );</span><br><span class="line">    Or(a=s1 , b=s2 , out=w1 );</span><br><span class="line">    Or(a=s3 , b=s4 , out=w2 );</span><br><span class="line">    Or(a=w1 , b=w2 , out=out );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Mux4Way16（四16bit并一）"><a href="#Mux4Way16（四16bit并一）" class="headerlink" title="Mux4Way16（四16bit并一）"></a>Mux4Way16（四16bit并一）</h4><ul>
<li><p>解析名字含义：</p>
<ul>
<li><p><strong>Mux16</strong> 是 <strong>16-bit</strong> 的意思。</p>
</li>
<li><p><strong>Mux4Way16</strong> 是 <strong>16-bit，4-way</strong> 的意思</p>
</li>
<li><p>那为啥 Or8Way 是 8-bit，1-way？的意思？</p>
</li>
</ul>
</li>
</ul>
<img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/412c8358a3261cc20cca4fb7d9437aa.jpg" alt="412c8358a3261cc20cca4fb7d9437aa" style="zoom:11%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 4-way 16-bit multiplexor:</span><br><span class="line"> * out = a if sel = 00</span><br><span class="line"> *       b if sel = 01</span><br><span class="line"> *       c if sel = 10</span><br><span class="line"> *       d if sel = 11</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">// 四条路/输入，每个都是16bit，根据sel的不同（4个sel，两位的二进制数字），输出其中 一 个数。</span><br><span class="line">CHIP Mux4Way16 &#123; 							// 看成 Mux 16 ，把 4Way 插在名字中间</span><br><span class="line">    IN a[16], b[16], c[16], d[16], sel[2];</span><br><span class="line">    OUT out[16];</span><br><span class="line">    </span><br><span class="line">    PARTS:</span><br><span class="line">    // we just need one output !</span><br><span class="line">    Mux16(a=a , b=b , sel=sel[0] , out=w1 );   // [0]是最右</span><br><span class="line">    Mux16(a=c , b=d , sel=sel[0] , out=w2 );</span><br><span class="line"></span><br><span class="line">    Mux16(a=w1 , b=w2 , sel=sel[1] , out=out );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Mux8Way16（八16bit并一）"><a href="#Mux8Way16（八16bit并一）" class="headerlink" title="Mux8Way16（八16bit并一）"></a>Mux8Way16（八16bit并一）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 8-way 16-bit multiplexor:</span><br><span class="line"> * out = a if sel = 000</span><br><span class="line"> *       b if sel = 001</span><br><span class="line"> *       c if sel = 010</span><br><span class="line"> *       d if sel = 011</span><br><span class="line"> *       e if sel = 100</span><br><span class="line"> *       f if sel = 101</span><br><span class="line"> *       g if sel = 110</span><br><span class="line"> *       h if sel = 111</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// 8条路/输入，每个都是16bit，根据sel的不同（8个sel，三位的二进制数字），输出其中 一 个数。</span><br><span class="line">CHIP Mux8Way16 &#123;</span><br><span class="line">    IN a[16], b[16], c[16], d[16],</span><br><span class="line">       e[16], f[16], g[16], h[16],</span><br><span class="line">       sel[3];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    // 用两个Mux4Way16再加上一个Mux16就行了。</span><br><span class="line">    Mux4Way16(a=a , b=b , c=c , d=d , sel[0]=sel[0] ,sel[1]=sel[1],out=w1 );</span><br><span class="line">    Mux4Way16(a=e , b=f , c=g , d=h , sel[0]=sel[0] ,sel[1]=sel[1],out=w2 );</span><br><span class="line">    Mux16(a=w1 , b=w2 , sel=sel[2] , out=out );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="DMux4Way（一解四）"><a href="#DMux4Way（一解四）" class="headerlink" title="DMux4Way（一解四）"></a>DMux4Way（一解四）</h4><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/042760ad0a8f3a0d172d509e6a2462e.jpg" alt="042760ad0a8f3a0d172d509e6a2462e" style="zoom:15%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 4-way demultiplexor:</span><br><span class="line"> * [a, b, c, d] = [in, 0, 0, 0] if sel = 00</span><br><span class="line"> *                [0, in, 0, 0] if sel = 01</span><br><span class="line"> *                [0, 0, in, 0] if sel = 10</span><br><span class="line"> *                [0, 0, 0, in] if sel = 11</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// 一个输入（几bit应该没要求），根据sel的不同选择赋予abcd哪个的值（4个值4Way，需要4个sel），其他值输出0（4个sel，两位二进制数字）</span><br><span class="line">CHIP DMux4Way &#123;</span><br><span class="line">    IN in, sel[2];</span><br><span class="line">    OUT a, b, c, d;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    DMux(in=in, sel=sel[1], a=top, b=bottom);</span><br><span class="line">    </span><br><span class="line">    DMux(in=top, sel=sel[0], a=a, b=b);</span><br><span class="line">    DMux(in=bottom, sel=sel[0], a=c, b=d);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="DMux8Way（一解八）"><a href="#DMux8Way（一解八）" class="headerlink" title="DMux8Way（一解八）"></a>DMux8Way（一解八）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 8-way demultiplexor:</span><br><span class="line"> * [a, b, c, d, e, f, g, h] = [in, 0,  0,  0,  0,  0,  0,  0] if sel = 000</span><br><span class="line"> *                            [0, in,  0,  0,  0,  0,  0,  0] if sel = 001</span><br><span class="line"> *                            [0,  0, in,  0,  0,  0,  0,  0] if sel = 010</span><br><span class="line"> *                            [0,  0,  0, in,  0,  0,  0,  0] if sel = 011</span><br><span class="line"> *                            [0,  0,  0,  0, in,  0,  0,  0] if sel = 100</span><br><span class="line"> *                            [0,  0,  0,  0,  0, in,  0,  0] if sel = 101</span><br><span class="line"> *                            [0,  0,  0,  0,  0,  0, in,  0] if sel = 110</span><br><span class="line"> *                            [0,  0,  0,  0,  0,  0,  0, in] if sel = 111</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">// 根据三位数的sel把in分成8部分</span><br><span class="line">CHIP DMux8Way &#123;</span><br><span class="line">    IN in, sel[3]; </span><br><span class="line">    // sel有8种可能，但打开时，只有一种状态，所以只有一个有值，其他都是0值。</span><br><span class="line">    OUT a, b, c, d, e, f, g, h;</span><br><span class="line">    </span><br><span class="line">    PARTS:</span><br><span class="line">    // 根据sel第一位，把in数据分成两部分，top和bottom</span><br><span class="line">    DMux(in=in, sel=sel[2], a=top, b=bottom);</span><br><span class="line"></span><br><span class="line">    // 根据sel第二位，分别把top和bottom再分成两个部分，总计四部分</span><br><span class="line">    DMux(in=top, sel=sel[1], a=w1, b=w2);</span><br><span class="line">    DMux(in=bottom, sel=sel[1], a=w3, b=w4);</span><br><span class="line"></span><br><span class="line">    // 根据sel第三位，把in总共分成8部分    </span><br><span class="line">    DMux(in=w1, sel=sel[0], a=a, b=b);</span><br><span class="line">    DMux(in=w2, sel=sel[0], a=c, b=d);</span><br><span class="line"></span><br><span class="line">    DMux(in=w3, sel=sel[0], a=e, b=f);</span><br><span class="line">    DMux(in=w4, sel=sel[0], a=g, b=h);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>nand2tetris</tag>
      </tags>
  </entry>
  <entry>
    <title>proj2</title>
    <url>/2025/05/01/nand2tetris-proj2-final/</url>
    <content><![CDATA[<h3 id="2-1-Binary-Numbers"><a href="#2-1-Binary-Numbers" class="headerlink" title="2.1 Binary Numbers"></a>2.1 Binary Numbers</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405164423371.png" alt="image-20250405164423371"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405163338004.png" alt="image-20250405163338004"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405163415418.png" alt="image-20250405163415418"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405163504925.png" alt="image-20250405163504925"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405163628278.png" alt="image-20250405163628278"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405163712469.png" alt="image-20250405163712469"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405163835567.png" alt="image-20250405163835567"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405164037453.png" alt="image-20250405164037453"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405164111279.png" alt="image-20250405164111279"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405164323993.png" alt="image-20250405164323993"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405164440667.png" alt="image-20250405164440667"></p>
<h3 id="2-2-Binary-Addtion"><a href="#2-2-Binary-Addtion" class="headerlink" title="2.2 Binary Addtion"></a>2.2 Binary Addtion</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405164738887.png" alt="image-20250405164738887"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405164824580.png" alt="image-20250405164824580"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405165448779.png" alt="image-20250405165448779"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405165500123.png" alt="image-20250405165500123"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405165606105.png" alt="image-20250405165606105"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405165703426.png"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405165723071.png" alt="image-20250405165723071"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405165825413.png" alt="image-20250405165825413"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405165845990.png" alt="image-20250405165845990"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405170123908.png" alt="image-20250405170123908"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405170129544.png" alt="image-20250405170129544"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405170208503.png" alt="image-20250405170208503"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405170216151.png" alt="image-20250405170216151"></p>
<h3 id="2-3-Negative-Numbers"><a href="#2-3-Negative-Numbers" class="headerlink" title="2.3 Negative Numbers"></a>2.3 Negative Numbers</h3><h4 id="Expression-of-negative-numbers"><a href="#Expression-of-negative-numbers" class="headerlink" title="Expression of negative numbers"></a>Expression of negative numbers</h4><p>way1</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405170630309.png" alt="image-20250405170630309"></p>
<p>way2：</p>
<p><strong>前一半的二进制数字（0-7）用来表示正数，后一半的二进制数字（8-15）留作表示负数（eg 表示-3，16-3&#x3D;13）</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405170802386.png" alt="image-20250405170802386"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405170839174.png" alt="image-20250405170839174"></p>
<h4 id="Addtion-in-2’s-Complement"><a href="#Addtion-in-2’s-Complement" class="headerlink" title="Addtion in 2’s Complement"></a>Addtion in 2’s Complement</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405171005000.png" alt="image-20250405171005000"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405171035760.png" alt="image-20250405171035760"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405171049696.png" alt="image-20250405171049696"></p>
<p>-2+(-3)&#x3D;-5,-5的补码就是11（1011）</p>
<h4 id="Computing-x"><a href="#Computing-x" class="headerlink" title="Computing -x"></a>Computing -x</h4><ul>
<li>Eg算-4的二进制表达：4&#x3D;100，1111-0100（1111怎么来的，令n&#x3D;4(意味着用4位二进制数来表示值））</li>
<li>取反码：1111-0100&#x3D;1011，求补码：1011+1&#x3D;1100</li>
<li>1100&#x3D;12，就是4的补码（16-4&#x3D;2）</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405172020903.png" alt="image-20250405172020903"></p>
<h4 id="Eg"><a href="#Eg" class="headerlink" title="Eg"></a>Eg</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405172052564.png" alt="image-20250405172052564"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405172109700.png" alt="image-20250405172109700"></p>
<p>具体步骤：</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405172145471.png" alt="image-20250405172145471"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405172153998.png" alt="image-20250405172153998"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405172208946.png" alt="image-20250405172208946"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405172347010.png" alt="image-20250405172347010"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250405172357526.png" alt="image-20250405172357526"></p>
<h3 id="2-4-ALU"><a href="#2-4-ALU" class="headerlink" title="2.4 ALU"></a>2.4 ALU</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406110555945.png" alt="image-20250406110555945"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406110852706.png" alt="image-20250406110852706"></p>
<p>The Hack ALU</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406111036333.png" alt="image-20250406111036333"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406111128678.png" alt="image-20250406111128678"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406111445256.png" alt="image-20250406111445256"></p>
<h4 id="The-Hack-ALU-operation"><a href="#The-Hack-ALU-operation" class="headerlink" title="The Hack ALU operation"></a>The Hack ALU operation</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406111650538.png" alt="image-20250406111650538"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406111659071.png" alt="image-20250406111659071"></p>
<h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406112032655.png" alt="image-20250406112032655"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406112211405.png" alt="image-20250406112211405"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406112814587.png" alt="image-20250406112814587"></p>
<h4 id="zr-ng-other-control-bits"><a href="#zr-ng-other-control-bits" class="headerlink" title="zr,ng(other control bits)"></a>zr,ng(other control bits)</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406113216863.png" alt="image-20250406113216863"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406113424794.png" alt="image-20250406113424794"></p>
<h3 id="2-5-Project-2-Overview"><a href="#2-5-Project-2-Overview" class="headerlink" title="2.5 Project 2 Overview"></a>2.5 Project 2 Overview</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406115407406.png" alt="image-20250406115407406"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406115505314.png" alt="image-20250406115505314"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406115619723.png" alt="image-20250406115619723"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406115813870.png" alt="image-20250406115813870"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406115848432.png" alt="image-20250406115848432"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406115943371.png" alt="image-20250406115943371"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406120143252.png" alt="image-20250406120143252"></p>
<h3 id="2-6-code"><a href="#2-6-code" class="headerlink" title="2.6 code"></a>2.6 code</h3><h4 id="HalfAdder"><a href="#HalfAdder" class="headerlink" title="HalfAdder"></a>HalfAdder</h4><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/1bbe5e2afb8e3660effe1112926c7ef.jpg" alt="1bbe5e2afb8e3660effe1112926c7ef" style="zoom:10%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Computes the sum of two bits.</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">CHIP HalfAdder &#123;</span><br><span class="line">    IN a, b;    // 1-bit inputs</span><br><span class="line">    OUT sum,    // Right bit of a + b </span><br><span class="line">        carry;  // Left bit of a + b</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Xor(a=a , b=b , out =sum );</span><br><span class="line">    And(a=a , b=b , out=carry );</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="FullAdder"><a href="#FullAdder" class="headerlink" title="FullAdder"></a>FullAdder</h4><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/d0e82880f0fd2ae54e547126bf44e45.jpg" alt="d0e82880f0fd2ae54e547126bf44e45" style="zoom:12%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Computes the sum of three bits.</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">CHIP FullAdder &#123;</span><br><span class="line">    IN a, b, c;  </span><br><span class="line">    OUT sum,     </span><br><span class="line">        carry;   </span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Xor(a=a , b=b , out=xorab );</span><br><span class="line">    Xor(a=xorab , b=c , out=sum );</span><br><span class="line">    </span><br><span class="line">    And(a=a , b=b , out=andab );</span><br><span class="line">    Xor(a =a , b =b , out =xor2ab );</span><br><span class="line">    And(a=xor2ab , b=c , out=andcc );</span><br><span class="line">    Or(a=andab , b=andcc , out=carry );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Add16"><a href="#Add16" class="headerlink" title="Add16"></a>Add16</h4><p><img src="https://th.bing.com/th/id/OIP.eBsFkGOXIwb2W-vw9H2ICAHaDx?rs=1&pid=ImgDetMain" alt="Add16 · Nand2tetris-Homework"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 16-bit adder: Adds two 16-bit two&#x27;s complement values.</span><br><span class="line"> * The most significant carry bit is ignored.</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">CHIP Add16 &#123;</span><br><span class="line">    IN a[16], b[16];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    HalfAdder(a=a[0] , b=b[0] , sum=out[0] , carry=c0 );</span><br><span class="line">    FullAdder(a=a[1] , b=b[1] , c=c0 , sum=out[1] , carry=c1 );</span><br><span class="line">    FullAdder(a=a[2] , b=b[2] , c=c1, sum=out[2] , carry=c2 );</span><br><span class="line">    FullAdder(a=a[3] , b=b[3] , c=c2 , sum=out[3] , carry=c3 );</span><br><span class="line">    FullAdder(a=a[4] , b=b[4] , c=c3 , sum=out[4] , carry=c4 );</span><br><span class="line">    FullAdder(a=a[5] , b=b[5] , c=c4 , sum=out[5] , carry=c5 );</span><br><span class="line">    FullAdder(a=a[6] , b=b[6] , c=c5 , sum=out[6] , carry=c6 );</span><br><span class="line">    FullAdder(a=a[7] , b=b[7] , c=c6 , sum=out[7] , carry=c7 );</span><br><span class="line">    FullAdder(a=a[8] , b=b[8] , c=c7 , sum=out[8] , carry=c8 );</span><br><span class="line">    FullAdder(a=a[9] , b=b[9] , c=c8 , sum=out[9] , carry=c9 );</span><br><span class="line">    FullAdder(a=a[10] , b=b[10] , c=c9 , sum=out[10] , carry=c10 );</span><br><span class="line">    FullAdder(a=a[11] , b=b[11] , c=c10 , sum=out[11] , carry=c11 );</span><br><span class="line">    FullAdder(a=a[12] , b=b[12] , c=c11 , sum=out[12] , carry=c12 );</span><br><span class="line">    FullAdder(a=a[13] , b=b[13] , c=c12 , sum=out[13] , carry=c13 );</span><br><span class="line">    FullAdder(a=a[14] , b=b[14] , c=c13 , sum=out[14] , carry=c14 );</span><br><span class="line">    FullAdder(a=a[15] , b=b[15] , c=c14 , sum=out[15] , carry=c15 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Inc16"><a href="#Inc16" class="headerlink" title="Inc16"></a>Inc16</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 16-bit incrementer:</span><br><span class="line"> * out = in + 1</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">CHIP Inc16 &#123;</span><br><span class="line">    IN in[16];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    HalfAdder(a=in[0] , b=true , sum=out[0] , carry=c0 );</span><br><span class="line">    FullAdder(a=in[1] , b=false , c=c0 , sum=out[1] , carry=c1 );</span><br><span class="line">    FullAdder(a=in[2] , b=false , c=c1, sum=out[2] , carry=c2 );</span><br><span class="line">    FullAdder(a=in[3] , b=false , c=c2 , sum=out[3] , carry=c3 );</span><br><span class="line">    FullAdder(a=in[4] , b=false , c=c3 , sum=out[4] , carry=c4 );</span><br><span class="line">    FullAdder(a=in[5] , b=false , c=c4 , sum=out[5] , carry=c5 );</span><br><span class="line">    FullAdder(a=in[6] , b=false , c=c5 , sum=out[6] , carry=c6 );</span><br><span class="line">    FullAdder(a=in[7] , b=false , c=c6 , sum=out[7] , carry=c7 );</span><br><span class="line">    FullAdder(a=in[8] , b=false , c=c7 , sum=out[8] , carry=c8 );</span><br><span class="line">    FullAdder(a=in[9] , b=false , c=c8 , sum=out[9] , carry=c9 );</span><br><span class="line">    FullAdder(a=in[10] , b=false , c=c9 , sum=out[10] , carry=c10 );</span><br><span class="line">    FullAdder(a=in[11] , b=false , c=c10 , sum=out[11] , carry=c11 );</span><br><span class="line">    FullAdder(a=in[12] , b=false , c=c11 , sum=out[12] , carry=c12 );</span><br><span class="line">    FullAdder(a=in[13] , b=false , c=c12 , sum=out[13] , carry=c13 );</span><br><span class="line">    FullAdder(a=in[14] , b=false , c=c13 , sum=out[14] , carry=c14 );</span><br><span class="line">    FullAdder(a=in[15] , b=false , c=c14 , sum=out[15] , carry=c15 );   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * ALU (Arithmetic Logic Unit):</span><br><span class="line"> * Computes out = one of the following functions:</span><br><span class="line"> *                0, 1, -1,</span><br><span class="line"> *                x, y, !x, !y, -x, -y,</span><br><span class="line"> *                x + 1, y + 1, x - 1, y - 1,</span><br><span class="line"> *                x + y, x - y, y - x,</span><br><span class="line"> *                x &amp; y, x | y</span><br><span class="line"> * on the 16-bit inputs x, y,</span><br><span class="line"> * according to the input bits zx, nx, zy, ny, f, no.</span><br><span class="line"> * In addition, computes the two output bits:</span><br><span class="line"> * if (out == 0) zr = 1, else zr = 0</span><br><span class="line"> * if (out &lt; 0)  ng = 1, else ng = 0</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">// Implementation: Manipulates the x and y inputs</span><br><span class="line">// and operates on the resulting values, as follows:</span><br><span class="line">// if (zx == 1) sets x = 0        // 16-bit constant</span><br><span class="line">// if (nx == 1) sets x = !x       // bitwise not</span><br><span class="line">// if (zy == 1) sets y = 0        // 16-bit constant</span><br><span class="line">// if (ny == 1) sets y = !y       // bitwise not</span><br><span class="line">// if (f == 1)  sets out = x + y  // integer 2&#x27;s complement addition</span><br><span class="line">// if (f == 0)  sets out = x &amp; y  // bitwise and</span><br><span class="line">// if (no == 1) sets out = !out   // bitwise not</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/3f83a46c9a79a5e0cb1a05e2188f621.jpg" alt="3f83a46c9a79a5e0cb1a05e2188f621" style="zoom: 18%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHIP ALU &#123;</span><br><span class="line">    IN  </span><br><span class="line">        x[16], y[16],  // 16-bit inputs        </span><br><span class="line">        zx, // zero the x input?</span><br><span class="line">        nx, // negate the x input?</span><br><span class="line">        zy, // zero the y input?</span><br><span class="line">        ny, // negate the y input?</span><br><span class="line">        f,  // compute (out = x + y) or (out = x &amp; y)?</span><br><span class="line">        no; // negate the out output?</span><br><span class="line">    OUT </span><br><span class="line">        out[16], // 16-bit output</span><br><span class="line">        zr,      // if (out == 0) equals 1, else 0</span><br><span class="line">        ng;      // if (out &lt; 0)  equals 1, else 0</span><br><span class="line"></span><br><span class="line">    PARTS:    </span><br><span class="line">    // zx</span><br><span class="line">    Mux16(a=x , b=false , sel=zx , out=x1 );</span><br><span class="line">    </span><br><span class="line">    // nx</span><br><span class="line">    Not16(in=x1 , out=notx );</span><br><span class="line">    Mux16(a=x1 , b=notx , sel=nx , out=x2 );</span><br><span class="line">    </span><br><span class="line">    // zy</span><br><span class="line">    Mux16(a=y , b=false , sel=zy , out=y1 );</span><br><span class="line">    </span><br><span class="line">    // ny</span><br><span class="line">    Not16(in=y1 , out=noty );</span><br><span class="line">    Mux16(a=y1 , b=noty , sel=ny , out=y2 );</span><br><span class="line">    </span><br><span class="line">    // f</span><br><span class="line">    Add16(a =x2 , b =y2 , out =add ); //+ 是 按位加 运算add</span><br><span class="line">    And16(a=x2 , b=y2 , out=and ); // &amp; 是 按位与 运算and</span><br><span class="line">    Mux16(a=and , b=add , sel=f , out=l1 );</span><br><span class="line">    </span><br><span class="line">    // no</span><br><span class="line">    Not16(in=l1 , out=l2 );</span><br><span class="line">    Mux16(a=l1, b=l2, sel=no, out=out,out[0..7]=kk1, out[8..15]=kk2, out[15]=kk);</span><br><span class="line">    // kk是精华 ！</span><br><span class="line">    </span><br><span class="line">    // zr</span><br><span class="line">    Or8Way(in=kk1, out=zr1);</span><br><span class="line">    Or8Way(in=kk2, out=zr2);</span><br><span class="line">    Or(a=zr1, b=zr2, out=zrNot);</span><br><span class="line">    Not(in=zrNot, out=zr);</span><br><span class="line"></span><br><span class="line">    // ng</span><br><span class="line">    Mux(a=false, b=kk, sel=zrNot, out=ng); </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>nand2tetris</tag>
      </tags>
  </entry>
  <entry>
    <title>proj3</title>
    <url>/2025/05/02/nand2tetris-proj3-final-2/</url>
    <content><![CDATA[<h3 id="3-1-Sequential-Logic（逻辑时序）"><a href="#3-1-Sequential-Logic（逻辑时序）" class="headerlink" title="3.1 Sequential Logic（逻辑时序）"></a>3.1 Sequential Logic（逻辑时序）</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407103408721.png" alt="image-20250407103408721"></p>
<h4 id="The-Clock"><a href="#The-Clock" class="headerlink" title="The Clock"></a>The Clock</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407103559711.png" alt="image-20250407103559711"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407103651219.png" alt="image-20250407103651219"></p>
<p>⭐</p>
<h4 id="Combinatorial-Logic-vs-Sequential-Logic"><a href="#Combinatorial-Logic-vs-Sequential-Logic" class="headerlink" title="Combinatorial Logic vs. Sequential Logic"></a>Combinatorial Logic vs. Sequential Logic</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407104103457.png" alt="image-20250407104103457"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407104118222.png" alt="image-20250407104118222"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407104217914.png" alt="image-20250407104217914"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407104323702.png" alt="image-20250407104323702"></p>
<h3 id="3-2-Flip-Flops-触发器"><a href="#3-2-Flip-Flops-触发器" class="headerlink" title="3.2 Flip Flops 触发器"></a>3.2 Flip Flops 触发器</h3><p>制作：允许上一步操作的芯片</p>
<p>⭐</p>
<h4 id="D-触发器"><a href="#D-触发器" class="headerlink" title="D 触发器"></a><strong>D 触发器</strong></h4><p><strong>换句话说，DFF 简单地将前一个时间周期的输入值作为当前周期的输出。𝑜𝑢𝑡(𝑡)&#x3D;𝑖𝑛(𝑡−1)</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407131732664.png" alt="image-20250407131732664"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407125650242.png" alt="image-20250407125650242"></p>
<h4 id="时序逻辑的原理"><a href="#时序逻辑的原理" class="headerlink" title="时序逻辑的原理"></a><strong>时序逻辑的原理</strong></h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407130044516.png" alt="image-20250407130044516"></p>
<h4 id="寄存器-Bit"><a href="#寄存器-Bit" class="headerlink" title="寄存器 Bit"></a>寄存器 Bit</h4><p>【寄存器（也）是一种常用的时序逻辑电路】</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407130252903.png" alt="image-20250407130252903"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407130512040.png" alt="image-20250407130512040"></p>
<h4 id="implement"><a href="#implement" class="headerlink" title="implement"></a>implement</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407130642446.png" alt="image-20250407130642446"></p>
<h4 id="show"><a href="#show" class="headerlink" title="show"></a>show</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407131134475.png" alt="image-20250407131134475"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407131141487.png" alt="image-20250407131141487"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407131153974.png" alt="image-20250407131153974"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407131219341.png" alt="image-20250407131219341"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407131249812.png" alt="image-20250407131249812"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407131306313.png" alt="image-20250407131306313"></p>
<h3 id="3-3-Memory-Units"><a href="#3-3-Memory-Units" class="headerlink" title="3.3 Memory Units"></a>3.3 Memory Units</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407162440343.png" alt="image-20250407162440343"></p>
<h4 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407162636276.png" alt="image-20250407162636276"></p>
<h4 id="The-most-basic-memory-element-Register"><a href="#The-most-basic-memory-element-Register" class="headerlink" title="The most basic memory element: Register"></a>The most basic memory element: Register</h4><p><img src="C:\Users\99512\AppData\Roaming\Typora\typora-user-images\image-20250407162706895.png" alt="image-20250407162706895"></p>
<p>⭐ （并着排列的）</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407162832550.png" alt="image-20250407162832550"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407163056209.png" alt="image-20250407163056209"></p>
<h4 id="RAM-unit"><a href="#RAM-unit" class="headerlink" title="RAM unit"></a>RAM unit</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407163925696.png" alt="image-20250407163925696"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407164114314.png" alt="image-20250407164114314"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407164124566.png" alt="image-20250407164124566"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407164321731.png" alt="image-20250407164321731"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407164328029.png" alt="image-20250407164328029"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407164336551.png" alt="image-20250407164336551"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407164355607.png" alt="image-20250407164355607"></p>
<p>（逻辑时序的芯片）</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407164409494.png" alt="image-20250407164409494"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407164444136.png" alt="image-20250407164444136"></p>
<h4 id="RAM-Read-Logic"><a href="#RAM-Read-Logic" class="headerlink" title="RAM &#x2F; Read Logic"></a>RAM &#x2F; Read Logic</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407164613906.png" alt="image-20250407164613906"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407164723446.png" alt="image-20250407164723446"></p>
<h4 id="RAM-Write-Logic"><a href="#RAM-Write-Logic" class="headerlink" title="RAM &#x2F; Write Logic"></a>RAM &#x2F; Write Logic</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407164822467.png" alt="image-20250407164822467"></p>
<h4 id="A-family-of-16-bit-RAM-chips"><a href="#A-family-of-16-bit-RAM-chips" class="headerlink" title="A family of 16-bit RAM chips"></a>A family of 16-bit RAM chips</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407165748845.png" alt="image-20250407165748845"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407165903504.png" alt="image-20250407165903504"></p>
<h3 id="3-4-Counters"><a href="#3-4-Counters" class="headerlink" title="3.4  Counters"></a>3.4  Counters</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407183128147.png" alt="image-20250407183128147"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407183216165.png" alt="image-20250407183216165"></p>
<p>(Inc 代表增量[+1])</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250407183416972.png" alt="image-20250407183416972"></p>
<h3 id="3-5-code"><a href="#3-5-code" class="headerlink" title="3.5 code"></a>3.5 code</h3><h4 id="preview：DFF"><a href="#preview：DFF" class="headerlink" title="preview：DFF"></a>preview：DFF</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250415121843294.png" alt="image-20250415121843294"></p>
<hr>
<h4 id="1-bit-register-芯片"><a href="#1-bit-register-芯片" class="headerlink" title="1-bit register 芯片"></a>1-bit register 芯片</h4><ul>
<li>输入一个1-bit的数。如果load&#x3D;1，下一秒输入该数，如果load&#x3D;0，下一秒保持原来的数值。</li>
<li>register 中文：<strong>寄存器</strong></li>
</ul>
<img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250415122014364.png" alt="image-20250415122014364" style="zoom:80%;" />

<img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250415122027636.png" style="zoom:67%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHIP Bit &#123;</span><br><span class="line">    IN in, load;</span><br><span class="line">    OUT out;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    Mux(a=out2 , b=in , sel=load , out=w1 );</span><br><span class="line">    DFF(in=w1 , out=out,out=out2 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="16-bit-register-芯片"><a href="#16-bit-register-芯片" class="headerlink" title="16-bit register 芯片"></a>16-bit register 芯片</h4><ul>
<li>输入一个16-bit的数。根据load，下一秒输出该数，或者下一秒保持上一秒的值。</li>
<li>1个load决定16个输出。16个1-bit register芯片并排。</li>
<li>对每一位进行load运算</li>
<li>最终的输入&#x2F;输出 都是 <strong>一个</strong> 16-bit的数</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/OIP-C%20(1).jpg"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/OIP-C%20(3).jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 16-bit 寄存器! </span><br><span class="line">CHIP Register &#123;</span><br><span class="line">    IN in[16], load;</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    //对16bit的每一位进行load，当load为1的时候给 对应位 储存值</span><br><span class="line">    Bit(in=in[15] , load=load , out=out[15] );</span><br><span class="line">    Bit(in=in[14] , load=load , out=out[14] );</span><br><span class="line">    Bit(in=in[13] , load=load , out=out[13] );</span><br><span class="line">    Bit(in=in[12] , load=load , out=out[12] );</span><br><span class="line">    Bit(in=in[11] , load=load , out=out[11] );</span><br><span class="line">    Bit(in=in[10] , load=load , out=out[10] );</span><br><span class="line">    Bit(in=in[9] , load=load , out=out[9] );</span><br><span class="line">    Bit(in=in[8] , load=load , out=out[8] );</span><br><span class="line">    Bit(in=in[7] , load=load , out=out[7] );</span><br><span class="line">    Bit(in=in[6] , load=load , out=out[6] );</span><br><span class="line">    Bit(in=in[5] , load=load , out=out[5] );</span><br><span class="line">    Bit(in=in[4] , load=load , out=out[4] );</span><br><span class="line">    Bit(in=in[3] , load=load , out=out[3] );</span><br><span class="line">    Bit(in=in[2] , load=load , out=out[2] );</span><br><span class="line">    Bit(in=in[1] , load=load , out=out[1] );</span><br><span class="line">    Bit(in=in[0] , load=load , out=out[0] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RAM8"><a href="#RAM8" class="headerlink" title="RAM8"></a>RAM8</h4><ul>
<li>8个 16-bit寄存器，并排放在RAM8里。</li>
<li>输入：<strong>一个</strong>16-bit 的数。输出为 <strong>一个</strong> 16-bit 的数  （<strong>数最大 16-bit</strong>，可小点）</li>
<li>⭐根据三位数地址address决定给    哪<strong>一个</strong>   register储存值。</li>
<li>对应的被调到的寄存器的load会被打开，load&#x3D;1。</li>
</ul>
<img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy82Njg0OTktNzY0NDYzZDgxYjExYWI4Mi5qcGc.png" style="zoom: 33%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHIP RAM8 &#123;</span><br><span class="line">    IN in[16], load, address[3];  // address有3位，能解码成 2的三次方= 8个 不一样的 三位数</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    //假设address为000，load为 1。DMux8Way会把load信号分配到输出端口a，</span><br><span class="line">    //也就是第一个寄存器的load端口会接收到值为 1 的信号，而其余寄存器的load端口会接收到值为 0 的信号（即不改变自身的值）</span><br><span class="line">    DMux8Way(in = load,sel = address,a = a,b = b,c = c,d = d,e = e,f = f,g = g,h = h);</span><br><span class="line"></span><br><span class="line">    Register(in=in , load=a , out=outa );</span><br><span class="line">    Register(in=in , load=b , out=outb );</span><br><span class="line">    Register(in=in , load=c , out=outc );</span><br><span class="line">    Register(in=in , load=d , out=outd );</span><br><span class="line">    Register(in=in , load=e , out=oute );</span><br><span class="line">    Register(in=in , load=f , out=outf );</span><br><span class="line">    Register(in=in , load=g , out=outg );</span><br><span class="line">    Register(in=in , load=h , out=outh );</span><br><span class="line"></span><br><span class="line">    Mux8Way16(a=outa , b=outb , c=outc , d=outd , e=oute , f=outf , g=outg , h=outh , sel=address , out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RAM64"><a href="#RAM64" class="headerlink" title="RAM64"></a>RAM64</h4><ul>
<li><strong>原理同RAM8：一个最大16-bit的输入，根据address（解码后）决定把改 一位数值 保存在哪个地方（该地方的load会打开）</strong></li>
<li>（结构由 8个RAM8 并排拼一起，解码端口变多了点，当然了address也长了点）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> CHIP RAM64 &#123;</span><br><span class="line">    IN in[16], load, address[6];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    DMux8Way(in = load,sel = address[3..5],a = a,b = b,c = c,d = d,e = e,f = f,g = g,h = h);</span><br><span class="line">    //两层解码：第一层，用前3位区分开8个不一样的RAM8</span><br><span class="line"></span><br><span class="line">	// 第二层，用后三位，区分开来每个RAM8的8个不同的寄存器。（这样子就区分开来了8*8=64个寄存器）</span><br><span class="line">    RAM8(in=in , load=a , address=address[0..2] , out=outa );</span><br><span class="line">    RAM8(in=in , load=b , address=address[0..2] , out=outb );</span><br><span class="line">    RAM8(in=in , load=c , address=address[0..2] , out=outc );</span><br><span class="line">    RAM8(in=in , load=d , address=address[0..2] , out=outd );</span><br><span class="line">    RAM8(in=in , load=e , address=address[0..2] , out=oute );</span><br><span class="line">    RAM8(in=in , load=f , address=address[0..2] , out=outf );</span><br><span class="line">    RAM8(in=in , load=g , address=address[0..2] , out=outg );</span><br><span class="line">    RAM8(in=in , load=h , address=address[0..2] , out=outh );</span><br><span class="line"></span><br><span class="line">    Mux8Way16(a=outa , b=outb , c=outc , d=outd , e=oute , f=outf , g=outg , h=outh , sel=address[3..5] , out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RAM512"><a href="#RAM512" class="headerlink" title="RAM512"></a>RAM512</h4><ul>
<li>原理同上，就是积木从小拼到大（8个RAM64）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHIP RAM512 &#123;</span><br><span class="line">    IN in[16], load, address[9];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    DMux8Way(in = load,sel = address[6..8],a = a,b = b,c = c,d = d,e = e,f = f,g = g,h = h);</span><br><span class="line"></span><br><span class="line">    RAM64(in=in , load=a , address=address[0..5] , out=outa );</span><br><span class="line">    RAM64(in=in , load=b , address=address[0..5] , out=outb );</span><br><span class="line">    RAM64(in=in , load=c , address=address[0..5] , out=outc );</span><br><span class="line">    RAM64(in=in , load=d , address=address[0..5] , out=outd );</span><br><span class="line">    RAM64(in=in , load=e , address=address[0..5] , out=oute );</span><br><span class="line">    RAM64(in=in , load=f , address=address[0..5] , out=outf );</span><br><span class="line">    RAM64(in=in , load=g , address=address[0..5] , out=outg );</span><br><span class="line">    RAM64(in=in , load=h , address=address[0..5] , out=outh );</span><br><span class="line"></span><br><span class="line">    Mux8Way16(a=outa , b=outb , c=outc , d=outd , e=oute , f=outf , g=outg , h=outh , sel=address[6..8] , out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RAM4K"><a href="#RAM4K" class="headerlink" title="RAM4K"></a>RAM4K</h4><ul>
<li>8个RAM512</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> CHIP RAM4K &#123;</span><br><span class="line">    IN in[16], load, address[12];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    DMux8Way(in = load,sel = address[9..11],a = a,b = b,c = c,d = d,e = e,f = f,g = g,h = h);</span><br><span class="line">    //假设address为000，load为 1。DMux8Way会把load信号分配到输出端口a。</span><br><span class="line"></span><br><span class="line">    RAM512(in=in , load=a , address=address[0..8] , out=outa );</span><br><span class="line">    RAM512(in=in , load=b , address=address[0..8] , out=outb );</span><br><span class="line">    RAM512(in=in , load=c , address=address[0..8] , out=outc );</span><br><span class="line">    RAM512(in=in , load=d , address=address[0..8] , out=outd );</span><br><span class="line">    RAM512(in=in , load=e , address=address[0..8] , out=oute );</span><br><span class="line">    RAM512(in=in , load=f , address=address[0..8] , out=outf );</span><br><span class="line">    RAM512(in=in , load=g , address=address[0..8] , out=outg );</span><br><span class="line">    RAM512(in=in , load=h , address=address[0..8] , out=outh );</span><br><span class="line"></span><br><span class="line">    Mux8Way16(a=outa , b=outb , c=outc , d=outd , e=oute , f=outf , g=outg , h=outh , sel=address[9..11] , out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="RAM16K"><a href="#RAM16K" class="headerlink" title="RAM16K"></a>RAM16K</h4><ul>
<li>4个RAM4K</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> CHIP RAM16K &#123;</span><br><span class="line">    IN in[16], load, address[14];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    DMux4Way(in = load,sel = address[12..13],a = a,b = b,c = c,d = d);</span><br><span class="line">    // 前两位用来区分4个RAM4K，后面12位是RAM4K所需的address。 </span><br><span class="line"></span><br><span class="line">    RAM4K(in=in , load=a , address=address[0..11] , out=outa );</span><br><span class="line">    RAM4K(in=in , load=b , address=address[0..11] , out=outb );</span><br><span class="line">    RAM4K(in=in , load=c , address=address[0..11] , out=outc );</span><br><span class="line">    RAM4K(in=in , load=d , address=address[0..11] , out=outd );</span><br><span class="line">    </span><br><span class="line">    Mux4Way16(a=outa , b=outb , c=outc , d=outd , sel=address[12..13] , out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250415131408114.png" alt="image-20250415131408114" style="zoom:50%;" />



<h4 id="CHIP-PC"><a href="#CHIP-PC" class="headerlink" title="CHIP PC"></a>CHIP PC</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/747e5d538c8e16996b67320f42e7e77.jpg" alt="747e5d538c8e16996b67320f42e7e77"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * A 16-bit counter. 计数器吧？？？</span><br><span class="line"> * if      reset(t): out(t+1) = 0</span><br><span class="line"> * else if load(t):  out(t+1) = in(t)</span><br><span class="line"> * else if inc(t):   out(t+1) = out(t) + 1</span><br><span class="line"> * else              out(t+1) = out(t)</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">CHIP PC &#123;</span><br><span class="line">    IN in[16], reset, load, inc;</span><br><span class="line">    OUT out[16];</span><br><span class="line">    </span><br><span class="line">    PARTS:</span><br><span class="line"></span><br><span class="line">    Inc16(in = feedback,out = incout);</span><br><span class="line">    Mux16(a = feedback,b = incout,sel = inc,out = out1);</span><br><span class="line">    Mux16(a = out1,b = in,sel = load,out = out2);</span><br><span class="line">    Mux16(a = out2,b = false,sel = reset,out = out3);</span><br><span class="line"></span><br><span class="line">    Register(in = out3,load = true,out = out,out = feedback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>nand2tetris</tag>
      </tags>
  </entry>
  <entry>
    <title>proj4</title>
    <url>/2025/05/03/nand2tetris-proj4-final/</url>
    <content><![CDATA[<h2 id="Machine-Language"><a href="#Machine-Language" class="headerlink" title="Machine Language"></a>Machine Language</h2><h3 id="4-1-Machine-Languages-Overview"><a href="#4-1-Machine-Languages-Overview" class="headerlink" title="4.1 Machine Languages  : Overview"></a>4.1 Machine Languages  : Overview</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250502141034037.png" alt="image-20250502141034037"></p>
<h4 id="内部："><a href="#内部：" class="headerlink" title="内部："></a>内部：</h4><ul>
<li><p>内存包括：程序内存和数据内存</p>
</li>
<li><p>硬件是固定的，软件可更改</p>
</li>
<li><p>软件变化，<strong>故计算机可做不同的事情</strong>（计算机的universality）</p>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408125639911.png" alt="image-20250408125639911"></p>
<p>let us see how hardware can do many things:</p>
<ul>
<li>by硬件逐个执行指令，把整个指令序列执行完放在一起，就得到了整个程序的功能。</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408125753379.png" alt="image-20250408125753379"></p>
<h4 id="⭐3-Question"><a href="#⭐3-Question" class="headerlink" title="⭐3-Question"></a>⭐3-Question</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408125900431.png" alt="image-20250408125900431"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408125917903.png" alt="image-20250408125917903"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408125923522.png" alt="image-20250408125923522"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408125934885.png" alt="image-20250408125934885"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250502141034037.png"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408130008095.png" alt="image-20250408130008095"><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408130013135.png" alt="image-20250408130013135"></p>
<hr>
<h4 id="machine-language-←-assembly-language"><a href="#machine-language-←-assembly-language" class="headerlink" title="machine language ← assembly language"></a>machine language ← assembly language</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408130111212.png" alt="image-20250408130111212"></p>
<p>我们写程序用的是高级语言，但电脑真正理解和执行的是机器语言</p>
<p>（其实里面的编译器是分两部的，第一步是高级语言→汇编语言，第二步是汇编语言→机器语言，now看的是part1）</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408130331472.png" alt="image-20250408130331472"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408130344599.png" alt="image-20250408130344599"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408130425028.png" alt="image-20250408130425028"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408130503603.png" alt="image-20250408130503603"></p>
<p>第一种解释</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408130536998.png" alt="image-20250408130536998"></p>
<p>第二种解释</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408130616234.png" alt="image-20250408130616234"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408131151981.png" alt="image-20250408131151981"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408131707478.png" alt="image-20250408131707478"></p>
<p>next </p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408131747616.png" alt="image-20250408131747616"></p>
<hr>
<h3 id="4-2-Machine-Languages-Elements"><a href="#4-2-Machine-Languages-Elements" class="headerlink" title="4.2  Machine Languages  : Elements"></a>4.2  Machine Languages  : Elements</h3><h4 id="Machine-Language-1"><a href="#Machine-Language-1" class="headerlink" title="Machine Language"></a>Machine Language</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408132050542.png" alt="image-20250408132050542"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408132302481.png" alt="image-20250408132302481"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408132600568.png" alt="image-20250408132600568"></p>
<h4 id="Memory-Hierarchy"><a href="#Memory-Hierarchy" class="headerlink" title="Memory Hierarchy"></a>Memory Hierarchy</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408132620787.png" alt="image-20250408132620787"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408132737232.png" alt="image-20250408132737232"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250502144445704.png" alt="image-20250502144445704"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408132934690.png" alt="image-20250408132934690"></p>
<h4 id="Registers-（in-CPU）（Q1Q3）"><a href="#Registers-（in-CPU）（Q1Q3）" class="headerlink" title="Registers （in CPU）（Q1Q3）"></a>Registers （in CPU）（Q1Q3）</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408133025180.png" alt="image-20250408133025180"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408133054897.png" alt="image-20250408133054897"></p>
<p><strong>用法&#x2F;类型①</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250502144901245.png" alt="image-20250502144901245"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250502144827311.png" alt="image-20250502144827311"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408133256967.png" alt="image-20250408133256967"></p>
<p><strong>用法&#x2F;类型②</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250502144926736.png" alt="image-20250502144926736"></p>
<p>so that we can</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250502145149469.png" alt="image-20250502145149469"></p>
<p>eg</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250502145219880.png" alt="image-20250502145219880"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408133356395.png" alt="image-20250408133356395"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408133409201.png" alt="image-20250408133409201"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408133424956.png" alt="image-20250408133424956"></p>
<h4 id="Addressing-Modes"><a href="#Addressing-Modes" class="headerlink" title="Addressing Modes"></a>Addressing Modes</h4><ul>
<li>现在回到最初的问题：</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408133452806.png" alt="image-20250408133452806"></p>
<ul>
<li>假设是一个简单的操作：那么它应该在什么上面操作？<ul>
<li>以下是四种类型的操作：</li>
</ul>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408133504911.png" alt="image-20250408133504911"></p>
<h4 id="Intput-Output"><a href="#Intput-Output" class="headerlink" title="Intput &#x2F; Output"></a>Intput &#x2F; Output</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408133742680.png" alt="image-20250408133742680"></p>
<h4 id="Flow-Control（Q2）"><a href="#Flow-Control（Q2）" class="headerlink" title="Flow Control（Q2）"></a>Flow Control（Q2）</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408133830358.png" alt="image-20250408133830358"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408133842300.png" alt="image-20250408133842300"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408133918049.png" alt="image-20250408133918049"></p>
<ul>
<li>我们可以把102位置命名为loop</li>
<li>实际上，用机器语言的位写它时，表示的是一样的</li>
<li>只是 loop 对人类来说更容易看</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408134216292.png" alt="image-20250408134216292"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408134345222.png" alt="image-20250408134345222"></p>
<hr>
<h2 id="HACK-Language"><a href="#HACK-Language" class="headerlink" title="HACK Language"></a>HACK Language</h2><h3 id="4-3-HACK-Computer-and-Language-Overview"><a href="#4-3-HACK-Computer-and-Language-Overview" class="headerlink" title="4.3 HACK Computer and Language (Overview)"></a>4.3 HACK Computer and Language (Overview)</h3><h4 id="hardware"><a href="#hardware" class="headerlink" title="hardware"></a>hardware</h4><ul>
<li>以下是下周要搭建的计算机（hardware）的概述：</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408144525868.png" alt="image-20250408144525868"></p>
<h4 id="software"><a href="#software" class="headerlink" title="software"></a>software</h4><ul>
<li>control the computer</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408144707993.png" alt="image-20250408144707993"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408144727327.png" alt="image-20250408144727327"></p>
<h4 id="reset-bottom"><a href="#reset-bottom" class="headerlink" title="reset bottom"></a>reset bottom</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408144804152.png" alt="image-20250408144804152"></p>
<h4 id="registers"><a href="#registers" class="headerlink" title="registers"></a>registers</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408145050542.png" alt="image-20250408145050542"></p>
<ul>
<li>（M 表示 A 寻址的 16 位 RAM 寄存器）</li>
<li>无论内存里有多少寄存器，每次被选择的只有一个，为M寄存器。</li>
</ul>
<h4 id="The-A-instruction"><a href="#The-A-instruction" class="headerlink" title="The A-instruction"></a>The A-instruction</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408145242790.png" alt="image-20250408145242790"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408145318144.png" alt="image-20250408145318144"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408145335059.png" alt="image-20250408145335059"></p>
<h4 id="The-C-instruction"><a href="#The-C-instruction" class="headerlink" title="The C-instruction"></a>The C-instruction</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408145347021.png" alt="image-20250408145347021"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408145445185.png" alt="image-20250408145445185"></p>
<ul>
<li><p>dest目的地，comp计算，jump跳转</p>
</li>
<li><p>看到A的时候，也可以用M替代</p>
</li>
<li><p>eg</p>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408145651883.png" alt="image-20250408145651883"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408145713384.png" alt="image-20250408145713384"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408145750031.png" alt="image-20250408145750031"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408145851786.png" alt="image-20250408145851786"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408150017420.png" alt="image-20250408150017420"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408150027153.png" alt="image-20250408150027153"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408150142297.png" alt="image-20250408150142297"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408150531444.png" alt="image-20250408150531444"></p>
<p>由于寄存器 A 的值为 1，第二行指令<code>M=A - 1</code>执行后，<code>A - 1 = 0</code>，这个 0 会被存储到<code>RAM[1]</code>中（因为 M 指向<code>RAM[1]</code> ）</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408150819756.png" alt="image-20250408150819756"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408150831390.png" alt="image-20250408150831390"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408150843125.png" alt="image-20250408150843125"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408150854396.png" alt="image-20250408150854396"></p>
<hr>
<h3 id="4-4-Hack-Language-plus"><a href="#4-4-Hack-Language-plus" class="headerlink" title="4.4 Hack Language plus"></a>4.4 Hack Language plus</h3><h4 id="Use-Binary-to-write"><a href="#Use-Binary-to-write" class="headerlink" title="Use Binary to write"></a>Use Binary to write</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408152040771.png" alt="image-20250408152040771"></p>
<ul>
<li>用机器语言（0和1构成）写的话，就不需要汇编器了。电脑直接读懂。</li>
<li>介绍这一节，也是为了更加了解机器语言和汇编语言的联系，为之后写汇编器做铺垫</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408152117325.png" alt="image-20250408152117325"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408152332506.png" alt="image-20250408152332506"></p>
<h4 id="C-ins"><a href="#C-ins" class="headerlink" title="C-ins"></a>C-ins</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408152519706.png" alt="image-20250408152519706"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408152600779.png" alt="image-20250408152600779"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408152758307.png" alt="image-20250408152758307"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408152841602.png" alt="image-20250408152841602"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408152923618.png" alt="image-20250408152923618"></p>
<h4 id="Eg"><a href="#Eg" class="headerlink" title="Eg"></a>Eg</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250502154554223.png" alt="image-20250502154554223"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250502154613246.png" alt="image-20250502154613246"></p>
<p>next</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408153534999.png" alt="image-20250408153534999"></p>
<hr>
<h3 id="4-5-Input-Ouput"><a href="#4-5-Input-Ouput" class="headerlink" title="4.5 Input &#x2F; Ouput"></a>4.5 Input &#x2F; Ouput</h3><ul>
<li>本节讨论：如何通过使用机器语言 来控制和操作 这些I&#x2F;O设备</li>
</ul>
<h4 id="Hack-computer-platform"><a href="#Hack-computer-platform" class="headerlink" title="Hack computer platform"></a>Hack computer platform</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408154943693.png" alt="image-20250408154943693"></p>
<p>实现：</p>
<ul>
<li>以后的软件部分，会用到高级语言的库来实现high-level</li>
<li>但是现在，只能用bit来实现low-level</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408155051269.png" alt="image-20250408155051269"></p>
<h4 id="OutPut"><a href="#OutPut" class="headerlink" title="OutPut"></a>OutPut</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408155241432.png" alt="image-20250408155241432"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250502155831854.png" alt="image-20250502155831854"></p>
<h4 id="Screen-memory-map"><a href="#Screen-memory-map" class="headerlink" title="Screen memory map"></a>Screen memory map</h4><ul>
<li>make a deep study in …</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250502160036115.png" alt="image-20250502160036115"></p>
<ul>
<li><p>每行每列的交叉点，都有所谓的像素。</p>
</li>
<li><p>how do we control it?</p>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408155514485.png" alt="image-20250408155514485"></p>
<ul>
<li><p>这些值的每一个有时被称为一个单词</p>
</li>
<li><p>所以有8k，每一个都是16bit的单词</p>
</li>
<li><p>像素怎么算：8k*16≈130,000</p>
</li>
<li><p>一个像素就是一个bit，一个bit就是一个像素</p>
</li>
<li><p>那么怎么对应呢？哪个bit位于哪个像素？</p>
</li>
<li><p>512&#x2F;16&#x3D;32，一行32个单词。</p>
</li>
<li><p>例如图片左上的4个黑点就是第一个单词的前四位bit（row0，col0-4）</p>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408155820456.png" alt="image-20250408155820456"></p>
<ul>
<li>这里的除法是整除</li>
<li>作为内存的一部分，更准确的地址是第二个</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408160355257.png" alt="image-20250408160355257"></p>
<ul>
<li>如果我们想操作单词里面特定的某一位，how？</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250502162053196.png"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408160452787.png" alt="image-20250408160452787"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408160937267.png" alt="image-20250408160937267"></p>
<h4 id="Keyboard-memory-map"><a href="#Keyboard-memory-map" class="headerlink" title="Keyboard memory map"></a>Keyboard memory map</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408161538288.png" alt="image-20250408161538288"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408161600439.png" alt="image-20250408161600439"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408161645079.png" alt="image-20250408161645079"><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408161745467.png" alt="image-20250408161745467"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408161911388.png" alt="image-20250408161911388"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408162004740.png" alt="image-20250408162004740"></p>
<hr>
<h3 id="4-6-HackProgramming-Part-1"><a href="#4-6-HackProgramming-Part-1" class="headerlink" title="4.6 HackProgramming  Part 1"></a>4.6 HackProgramming  Part 1</h3><h4 id="使用Hack机器语言进行编程"><a href="#使用Hack机器语言进行编程" class="headerlink" title="使用Hack机器语言进行编程"></a>使用Hack机器语言进行编程</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408170651825.png" alt="image-20250408170651825"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408170710787.png" alt="image-20250408170710787"></p>
<h5 id="Way1：by汇编器→机器语言→执行程序（将在proj6编写汇编器）"><a href="#Way1：by汇编器→机器语言→执行程序（将在proj6编写汇编器）" class="headerlink" title="Way1：by汇编器→机器语言→执行程序（将在proj6编写汇编器）"></a>Way1：by汇编器→机器语言→执行程序（将在proj6编写汇编器）</h5><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408170815973.png" alt="image-20250408170815973"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408170841654.png" alt="image-20250408170841654"></p>
<h5 id="Way2-把机器语言输入到-CPU-Emulator（仿真器），执行程序（我们现在的选择）"><a href="#Way2-把机器语言输入到-CPU-Emulator（仿真器），执行程序（我们现在的选择）" class="headerlink" title="Way2 : 把机器语言输入到 CPU Emulator（仿真器），执行程序（我们现在的选择）"></a>Way2 : 把机器语言输入到 CPU Emulator（仿真器），执行程序（我们现在的选择）</h5><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408170949958.png" alt="image-20250408170949958"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408171006210.png" alt="image-20250408171006210"></p>
<h4 id="4-6-4-7-4-8-讨论的内容："><a href="#4-6-4-7-4-8-讨论的内容：" class="headerlink" title="4.6 4.7 4.8 讨论的内容："></a><strong>4.6 4.7 4.8 讨论的内容：</strong></h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408171140334.png" alt="image-20250408171140334"></p>
<h4 id="寄存器和内存"><a href="#寄存器和内存" class="headerlink" title="寄存器和内存"></a>寄存器和内存</h4><h5 id="寄存器：D-A-M"><a href="#寄存器：D-A-M" class="headerlink" title="寄存器：D A M"></a>寄存器：D A M</h5><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408171208123.png" alt="image-20250408171208123"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408171221797.png" alt="image-20250408171221797"><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408171240428.png" alt="image-20250408171240428"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408171249595.png" alt="image-20250408171249595"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408171300916.png" alt="image-20250408171300916"><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408171306564.png" alt="image-20250408171306564"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408171321352.png" alt="image-20250408171321352"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408171545734.png" alt="image-20250408171545734"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408171835773.png" alt="image-20250408171835773"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408171859789.png" alt="image-20250408171859789"></p>
<h5 id="如何终结程序"><a href="#如何终结程序" class="headerlink" title="如何终结程序"></a>如何终结程序</h5><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408172553897.png" alt="image-20250408172553897"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408172808706.png" alt="image-20250408172808706"></p>
<h5 id="可读性（Hack机器语言的规范）"><a href="#可读性（Hack机器语言的规范）" class="headerlink" title="可读性（Hack机器语言的规范）"></a>可读性（Hack机器语言的规范）</h5><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408172907182.png" alt="image-20250408172907182"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408172956750.png" alt="image-20250408172956750"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408173136744.png" alt="image-20250408173136744"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408173149349.png" alt="image-20250408173149349"></p>
<h5 id="Hack语言的内置符号"><a href="#Hack语言的内置符号" class="headerlink" title="Hack语言的内置符号"></a>Hack语言的内置符号</h5><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408173355650.png" alt="image-20250408173355650"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408173407233.png" alt="image-20250408173407233"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408175526572.png" alt="image-20250408175526572"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408173419671.png" alt="image-20250408173419671"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408173433439.png" alt="image-20250408173433439"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408173511898.png" alt="image-20250408173511898"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408173530087.png"></p>
<hr>
<h3 id="4-7-HackProgramming-Part-2"><a href="#4-7-HackProgramming-Part-2" class="headerlink" title="4.7 HackProgramming  Part 2"></a>4.7 HackProgramming  Part 2</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408175652006.png" alt="image-20250408175652006"></p>
<h4 id="Branching"><a href="#Branching" class="headerlink" title="Branching"></a>Branching</h4><ul>
<li>评估布尔表达式或布尔条件，根据这个值决定是否跳跃（go to)</li>
</ul>
<h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><p>可以看到一开始@后面是数字</p>
<p>(这里的8是第8有效行，从0开始)</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408175934716.png" alt="image-20250408175934716"></p>
<h5 id="符号引用"><a href="#符号引用" class="headerlink" title="符号引用"></a>符号引用</h5><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408180345936.png" alt="image-20250408180345936"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408180437096.png" alt="image-20250408180437096"></p>
<p><strong>label ：有括号（）的叫 label ，可以被引用（如下图）</strong></p>
<p><strong>引用的符号是 @</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408180508403.png" alt="image-20250408180508403"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408185937593.png" alt="image-20250408185937593"></p>
<p>（上图小字）</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408180613605.png" alt="image-20250408180613605"></p>
<ul>
<li><p>标签声明不会被翻译（不是有效行）</p>
</li>
<li><p>引用了标签，就跳转到标签声明的下一行（执行）</p>
</li>
<li><p>标签怎么被引用呢，当触发了条件时</p>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408180736935.png" alt="image-20250408180736935"></p>
<p>标签的意义：自己做的标签不会被编译，但是比数字更加可读，更清楚地知道什么时候进行分支分叉。</p>
<hr>
<h4 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408181502003.png" alt="image-20250408181502003"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408181507772.png" alt="image-20250408181507772"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408181516292.png" alt="image-20250408181516292"></p>
<h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h5><p><strong>变量的声明</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408181712643.png" alt="image-20250408181712643"></p>
<h5 id="标签-变量-的区别"><a href="#标签-变量-的区别" class="headerlink" title="标签 变量 的区别"></a><strong>标签 变量 的区别</strong></h5><blockquote>
<p>**变量的引用  **  没有()</p>
</blockquote>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408181819165.png" alt="image-20250408181819165"></p>
<h5 id="第一个观察"><a href="#第一个观察" class="headerlink" title="第一个观察"></a>第一个观察</h5><blockquote>
<p><strong>引用的变量 或者 label都是不被编译的，但是有对应的数字被编译</strong></p>
</blockquote>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408181922547.png" alt="image-20250408181922547"></p>
<h5 id="第二个观察"><a href="#第二个观察" class="headerlink" title="第二个观察"></a>第二个观察</h5><blockquote>
<p>变量从地址16开始分配RAM，后面的以此类推。</p>
</blockquote>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408182159346.png" alt="image-20250408182159346"></p>
<h5 id="第三个观察"><a href="#第三个观察" class="headerlink" title="第三个观察"></a>第三个观察</h5><blockquote>
<p>easy to read and debug（可重定位代码） <strong>？？？</strong></p>
</blockquote>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408182323581.png" alt="image-20250408182323581"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408182346704.png" alt="image-20250408182346704"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408182351776.png" alt="image-20250408182351776"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408182400615.png" alt="image-20250408182400615"></p>
<h4 id="Iterable"><a href="#Iterable" class="headerlink" title="Iterable"></a>Iterable</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408182556754.png" alt="image-20250408182556754"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408182619170.png" alt="image-20250408182619170"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408182712743.png" alt="image-20250408182712743"></p>
<p>通用步骤（编写汇编语言的程序）：</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408183553976.png" alt="image-20250408183553976"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408183605081.png" alt="image-20250408183605081"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408183616168.png" alt="image-20250408183616168"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408183654849.png" alt="image-20250408183654849"></p>
<hr>
<h3 id="4-8HackProgramming-Part-3"><a href="#4-8HackProgramming-Part-3" class="headerlink" title="4.8HackProgramming  Part 3"></a>4.8HackProgramming  Part 3</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408193159878.png" alt="image-20250408193159878"></p>
<h4 id="Pointers"><a href="#Pointers" class="headerlink" title="Pointers"></a>Pointers</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408193340051.png" alt="image-20250408193340051"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408193454956.png" alt="image-20250408193454956"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408193503108.png" alt="image-20250408193503108"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408193614636.png" alt="image-20250408193614636"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408194303828.png" alt="image-20250408194303828"></p>
<h4 id="Input-Output"><a href="#Input-Output" class="headerlink" title="Input &#x2F; Output"></a>Input &#x2F; Output</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408194624386.png" alt="image-20250408194624386"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408194713298.png" alt="image-20250408194713298"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408194740498.png" alt="image-20250408194740498"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408195434479.png" alt="image-20250408195434479"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408195506221.png" alt="image-20250408195506221"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409085602507.png" alt="image-20250409085602507"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409090013332.png" alt="image-20250409090013332"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409090019914.png" alt="image-20250409090019914"></p>
<p>-1的二进制就是1111 1111 1111 1111 ,在图像上就是一行黑线。</p>
<p>然后画下一行，将地址+32就是下一行了（一行32个点，每个点都是16bit的二进制数字）</p>
<p>（16*32&#x3D;512	一行512像素）</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409085922633.png" alt="image-20250409085922633"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409090618399.png" alt="image-20250409090618399"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409090704474.png" alt="image-20250409090704474"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409090843101.png" alt="image-20250409090843101"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409090851821.png" alt="image-20250409090851821"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409090858509.png" alt="image-20250409090858509"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409091019503.png" alt="image-20250409091019503"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409091145770.png" alt="image-20250409091145770"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409091237626.png" alt="image-20250409091237626"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409091410869.png" alt="image-20250409091410869"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409091513788.png" alt="image-20250409091513788"></p>
<hr>
<h2 id="Proj4"><a href="#Proj4" class="headerlink" title="Proj4"></a>Proj4</h2><h3 id="4-9-Project-4-Overview"><a href="#4-9-Project-4-Overview" class="headerlink" title="4.9 Project 4 Overview"></a>4.9 Project 4 Overview</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409091626333.png" alt="image-20250409091626333"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409091812658.png" alt="image-20250409091812658"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409092150938.png" alt="image-20250409092150938"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409092627420.png" alt="image-20250409092627420"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409093508008.png" alt="image-20250409093508008"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409093530565.png" alt="image-20250409093530565"></p>
<hr>
<h3 id="4-10-Project-4"><a href="#4-10-Project-4" class="headerlink" title="4.10 Project 4"></a>4.10 Project 4</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250413153708189.png" alt="image-20250413153708189"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@R0</span><br><span class="line">D=M</span><br><span class="line">@a</span><br><span class="line">M=D // a=R0</span><br><span class="line"></span><br><span class="line">@R1</span><br><span class="line">D=M</span><br><span class="line">@b</span><br><span class="line">M=D // b=R1</span><br><span class="line"></span><br><span class="line">@0 	 		//	   </span><br><span class="line">D = A 		//</span><br><span class="line">@R2</span><br><span class="line">M=D // R2=0</span><br><span class="line"></span><br><span class="line">(LOOP)  	//</span><br><span class="line">    @a</span><br><span class="line">    D=M</span><br><span class="line">    @STOP</span><br><span class="line">    D;JLE  // while (a&gt;0),continue,or goto &#x27;stop&#x27;</span><br><span class="line"></span><br><span class="line">    @b</span><br><span class="line">    D=M</span><br><span class="line">    @R2</span><br><span class="line">    M=M+D // R2=R2+b</span><br><span class="line">	</span><br><span class="line">    @a</span><br><span class="line">    M=M-1 //a=a-1</span><br><span class="line"></span><br><span class="line">    @LOOP  		//			</span><br><span class="line">    0;JMP  		//</span><br><span class="line"></span><br><span class="line">(STOP) 		//</span><br><span class="line">    @stop</span><br><span class="line">    0;JMP</span><br><span class="line"></span><br><span class="line">// 大部分自己写出来了！小部分不到位。</span><br></pre></td></tr></table></figure>

<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250413164147760.png" alt="image-20250413164147760"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250413163504053.png" alt="image-20250413163504053"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@KBD // define KBD</span><br><span class="line">D=M </span><br><span class="line"></span><br><span class="line">@i</span><br><span class="line">M=0 // define i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(BLACK)</span><br><span class="line">	@KBD</span><br><span class="line">	D=M</span><br><span class="line">	@WHITE</span><br><span class="line">	D;JLE</span><br><span class="line">	</span><br><span class="line">	@i 		//</span><br><span class="line">	A=M		//</span><br><span class="line">	M=-1 // RAM[addr] = -1</span><br><span class="line">	</span><br><span class="line">	@i</span><br><span class="line">	M=M+1 // i++</span><br><span class="line">	</span><br><span class="line">	@BLACK</span><br><span class="line">	0;JMP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(WHITE)</span><br><span class="line">	@i</span><br><span class="line">	A=M		//</span><br><span class="line">	M=0 	//</span><br><span class="line">	@i		//</span><br><span class="line">	M=M+1	//</span><br><span class="line">	</span><br><span class="line">	@WHITE</span><br><span class="line">    0;JMP</span><br><span class="line">    </span><br><span class="line">// 大概逻辑写出来了，就是细节不到位。</span><br></pre></td></tr></table></figure>

<p>（参考）</p>
<img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409090618399.png" alt="image-20250409090618399" style="zoom: 50%;" />

<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250409090019914.png" alt="image-20250409090019914"></p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>nand2tetris</tag>
      </tags>
  </entry>
  <entry>
    <title>proj5</title>
    <url>/2025/05/03/nand2tetris-proj5-final-2/</url>
    <content><![CDATA[<h1 id="5-1"><a href="#5-1" class="headerlink" title="5.1"></a>5.1</h1><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414103254600.png" alt="image-20250414103254600"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414103339640.png" alt="image-20250414103339640"></p>
<h2 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h2><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414103410299.png" alt="image-20250414103410299"></p>
<h2 id="Infomation-Flows"><a href="#Infomation-Flows" class="headerlink" title="Infomation Flows"></a>Infomation Flows</h2><ul>
<li><p><strong>Element + 三条总线</strong></p>
</li>
<li><p>（大概看看，具体的看后面）</p>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414103512260.png" alt="image-20250414103512260"></p>
<h3 id="The-Arithmetic-Logic-Unit"><a href="#The-Arithmetic-Logic-Unit" class="headerlink" title="The Arithmetic Logic Unit"></a>The Arithmetic Logic Unit</h3><ul>
<li>data接入ALU，得到输出</li>
<li>输出值返回数据总线</li>
<li>我觉得是输出out或者回去内存？</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414103725776.png" alt="image-20250414103725776"></p>
<ul>
<li>control总线 告诉ALU进行何种操作</li>
<li>ALU 返回告诉 Control 系统其他部分进行什么操作</li>
<li>当 CPU 从程序内存中获取到指令后，会对指令进行解析。对于指令中的控制信息，通过控制总线传出去（让算术逻辑单元、寄存器、内存等部件按要求操作，比如让算术逻辑单元进行加法运算等）<ul>
<li>例如如果ALU发现某个数字大于零，他将告诉Control下一个指令的跳转以及下一个指令是什么</li>
</ul>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414103745983.png" alt="image-20250414103745983"></p>
<h3 id="Address-Register"><a href="#Address-Register" class="headerlink" title="Address Register"></a>Address Register</h3><ul>
<li>寄存器储存中间结果。所以数据总线接到Register里</li>
<li>有的寄存器还用作地址储存器，所以register要接入地址总线<ul>
<li>（将数字，也就是地址放入寄存器中，然后它就指定了我们想要访问的位置。）</li>
</ul>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414104302989.png" alt="image-20250414104302989"></p>
<h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414104324563.png" alt="image-20250414104324563"></p>
<h3 id="Data-Memory"><a href="#Data-Memory" class="headerlink" title="Data Memory"></a>Data Memory</h3><ul>
<li>Data Memory需要连接数据总线：因为输入和输出（这没问题）</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414104458851.png" alt="image-20250414104458851"></p>
<h3 id="Program-Memory"><a href="#Program-Memory" class="headerlink" title="Program Memory"></a>Program Memory</h3><ul>
<li>程序内存</li>
<li>需要从PM取出CPU所需要的程序指令，所以连接地址总线<ul>
<li>例如，<strong>（程序指令是 CPU 找内存要的）</strong>，CPU 要从程序内存里拿指令时，得先把<strong>下一条</strong>指令的地址发出去（通过地址总线），程序内存收到地址后，按地址找到指令再传给 CPU（通过数据总线）。</li>
</ul>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414104556795.png" alt="image-20250414104556795"></p>
<h2 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h2><p><strong>我们在下一单元要做的，是更仔细地研究最内层的循环</strong>，也就是我们的硬件应该执行的基本操作：即从内存，程序内存中取出一条指令，并恰当地使用系统的其他部分来执行它。这被称为取指 - 执行周期，这将是下一单元的内容。<strong>（一条一条执行程序指令）</strong></p>
<hr>
<h1 id="5-2-The-Fetch-Execute-Cycle"><a href="#5-2-The-Fetch-Execute-Cycle" class="headerlink" title="5.2 The Fetch-Execute Cycle"></a>5.2 The Fetch-Execute Cycle</h1><h2 id="The-basic-CPU-loop"><a href="#The-basic-CPU-loop" class="headerlink" title="The basic CPU loop"></a>The basic CPU loop</h2><p><strong>一条条 获取-执行 程序指令</strong></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414105855817.png" alt="image-20250414105855817"></p>
<h3 id="获取指令"><a href="#获取指令" class="headerlink" title="获取指令"></a>获取指令</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414121331533.png" alt="image-20250414121331533"></p>
<p>but下一条指令在哪里找呢？</p>
<ul>
<li><p>在内存里</p>
</li>
<li><p>在程序内存里</p>
</li>
<li><p>在程序计数器（program counter）里面（某个寄存器）</p>
<ul>
<li>它会根据指令的执行情况自动递增或根据跳转指令等进行修改，以指向下一条要取的指令<strong>地址</strong>。</li>
</ul>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414121446414.png" alt="image-20250414121446414"></p>
<h3 id="执行指令"><a href="#执行指令" class="headerlink" title="执行指令"></a>执行指令</h3><ul>
<li><p>有了Instruction，我们需要执行它。</p>
</li>
<li><p>指令代码包含了很多信息（不同位有不同信息）</p>
</li>
<li><p>把取出的指令通过 控制总线 输出到CPU</p>
<ul>
<li>控制总线 告诉ALU计算什么指令，告诉数据来自哪个寄存器还是哪个数据存储器。</li>
</ul>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414121636482.png" alt="image-20250414121636482"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414121725006.png" alt="image-20250414121725006"></p>
<h3 id="获取-执行-冲突Clash"><a href="#获取-执行-冲突Clash" class="headerlink" title="获取-执行 冲突Clash"></a>获取-执行 冲突Clash</h3><ul>
<li>简单来说，就是因为内存地址输入在同一时刻的唯一性，而取指令和执行指令时都需要使用内存地址来获取不同的内容（指令和数据），从而导致了冲突。</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414121913298.png" alt="image-20250414121913298"></p>
<ul>
<li>解决方法：一个一个做。通过一个Mux解决（sel：a Fetch&#x2F;Execute Bit)</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414122048850.png" alt="image-20250414122048850"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414122147788.png" alt="image-20250414122147788"></p>
<ul>
<li>更简单的解决方法：把内存分为两个部分，一个部分作为数据存储器，另一个办法作为程序存储器。</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414122213402.png" alt="image-20250414122213402"></p>
<h2 id="Next-1"><a href="#Next-1" class="headerlink" title="Next"></a>Next</h2><ul>
<li>这一节，我们讨论了计算机的一般架构</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414122314197.png" alt="image-20250414122314197"></p>
<ul>
<li>下一节，我们讨论我们的HACK计算机</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414122324359.png" alt="image-20250414122324359"></p>
<hr>
<h1 id="5-3-Central-Processing-Unit"><a href="#5-3-Central-Processing-Unit" class="headerlink" title="5.3 Central Processing Unit"></a>5.3 Central Processing Unit</h1><h2 id="CPU-interface-and-implementation"><a href="#CPU-interface-and-implementation" class="headerlink" title="CPU: interface and implementation"></a>CPU: interface and implementation</h2><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414122436406.png" alt="image-20250414122436406"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414122636301.png" alt="image-20250414122636301"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414122807022.png" alt="image-20250414122807022"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414122921132.png" alt="image-20250414122921132"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414123504372.png" alt="image-20250414123504372"></p>
<h2 id="CPU-Instruction-handling"><a href="#CPU-Instruction-handling" class="headerlink" title="CPU: Instruction handling"></a>CPU: Instruction handling</h2><h3 id="handle-A-instruction"><a href="#handle-A-instruction" class="headerlink" title="handle  A-instruction"></a>handle  A-instruction</h3><ul>
<li><p><strong>地址寄存器</strong></p>
</li>
<li><p>解码：分离操作码（最前面<strong>一位</strong>，就是instruction[15] ）和其他字段（15位的地址或是值）</p>
</li>
<li><p>确定是A指令后，取出后15位值，把它放入A寄存器中。</p>
</li>
<li><p>CPU 同时做的另一件事：取出A寄存器的输出（后15位，ins[0..14] )，并通过我们称之为“M地址”的输出将其输出到CPU外部。</p>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414124010589.png" alt="image-20250414124010589"></p>
<h3 id="handle-C-instruction"><a href="#handle-C-instruction" class="headerlink" title="handle  C-instruction"></a>handle  C-instruction</h3><ul>
<li>解码：分离操作码和其他三个字段</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414124307951.png" alt="image-20250414124307951"></p>
<h3 id="A-regester-–-again"><a href="#A-regester-–-again" class="headerlink" title="A regester – again"></a>A regester – again</h3><ul>
<li>我们发现：A寄存器也可以由 ALU的输出 提供数据，而不一定是来自指令输入。（是不是有时候ALU发现该跳转了，所以输出指令给A regester？）</li>
<li>在某些情况下是操作码为0的A指令，在这种情况下，我们希望输入来自指令。</li>
<li>在其他情况下是操作码为1的C指令，在这种情况下，我们希望以某种方式路由A寄存器的输入，使得输入来自ALU。<ul>
<li>例如，如果 C 指令是要计算某个数值与 A 寄存器当前值的和，那么 ALU 会从 D 寄存器（或其他数据源）和 A 寄存器获取操作数进行加法运算，<strong>运算结果可能需要再存回 A 寄存器</strong>，所以就需要将 ALU 的输出路由到 A 寄存器作为其输入。（就不用inM了）</li>
</ul>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414124347934.png" alt="image-20250414124347934"></p>
<h2 id="CPU-ALU-operation"><a href="#CPU-ALU-operation" class="headerlink" title="CPU: ALU operation"></a>CPU: ALU operation</h2><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414124511512.png" alt="image-20250414124511512"></p>
<h3 id="ALU-operation-inputs"><a href="#ALU-operation-inputs" class="headerlink" title="ALU operation: inputs"></a>ALU operation: inputs</h3><ul>
<li>remember：C指令由不同的位字段组成，每个字段都有不同的含义。</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414124645511.png" alt="image-20250414124645511"></p>
<ul>
<li>ALU 有两个输入源 , 最终输入depend on 控制位c和011111(now)</li>
<li>Control bit <strong>from the instruction</strong></li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414124841120.png" alt="image-20250414124841120"></p>
<h3 id="ALU-operation-outputs"><a href="#ALU-operation-outputs" class="headerlink" title="ALU operation: outputs"></a>ALU operation: outputs</h3><ul>
<li>ALU 的 输出被送到三个地方。</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414125122759.png" alt="image-20250414125122759"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414125129007.png" alt="image-20250414125129007"><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414125141052.png" alt="image-20250414125141052"></p>
<ul>
<li>我们有三个目的地的位bit，这些bit决定是否打开D寄存器、A寄存器和数据存储器来接受ALU的输出。（即有选择性地接收）</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414125230737.png" alt="image-20250414125230737"></p>
<p>Control bit c’s?</p>
<ul>
<li>这两个控制位用于记录ALU的输出是负还是零。</li>
<li>important for what follows.</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414125405175.png" alt="image-20250414125405175"></p>
<h2 id="CPU：Control-（logic"><a href="#CPU：Control-（logic" class="headerlink" title="CPU：Control （logic"></a>CPU：Control （logic</h2><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414125438604.png" alt="image-20250414125438604"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414130006833.png" alt="image-20250414130006833"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414130112941.png" alt="image-20250414130112941"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414130130355.png" alt="image-20250414130130355"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414130157260.png" alt="image-20250414130157260"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414130224262.png" alt="image-20250414130224262"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414130255057.png" alt="image-20250414130255057"></p>
<ul>
<li>if 程序员已经事先将想要跳转到的地址存入了A寄存器。如果我们执行PC等于A，程序计数器将输出接下来必须执行的下一条指令的地址。</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414130323024.png" alt="image-20250414130323024"></p>
<ul>
<li>如果我们有一个条件跳转，我们必须查看ALU的输出，并决定这个跳转是否应该实际发生。<ul>
<li>例如，假设我们有一个条件跳转指令是 “如果寄存器 A 中的值大于寄存器 B 中的值，则跳转到地址 X”。在执行这条指令之前，会先让 ALU 进行 A - B 的运算，然后根据 ALU 的输出结果（如果结果大于 0，表示 A 大于 B）来决定是否跳转到地址 X。</li>
</ul>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414130403294.png" alt="image-20250414130403294"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414193356928.png" alt="image-20250414193356928"></p>
<h2 id="Last-：we-finish-CPU"><a href="#Last-：we-finish-CPU" class="headerlink" title="Last ：we finish CPU"></a>Last ：we finish CPU</h2><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414193427312.png" alt="image-20250414193427312"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414130853170.png" alt="image-20250414130853170"></p>
<p>next</p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414130905093.png" alt="image-20250414130905093"></p>
<hr>
<h1 id="5-4-The-Hack-Computer"><a href="#5-4-The-Hack-Computer" class="headerlink" title="5.4 The Hack Computer"></a>5.4 The Hack Computer</h1><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414131123663.png" alt="image-20250414131123663"></p>
<h2 id="Hack-CPU-Operation"><a href="#Hack-CPU-Operation" class="headerlink" title="Hack CPU Operation"></a>Hack CPU Operation</h2><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414131334263.png" alt="image-20250414131334263"></p>
<ul>
<li>如果指令中提到了助记符“D”和“A”，CPU就会操作位于CPU内部的相应的<strong>D寄存器</strong>和<strong>A寄存器</strong>。</li>
<li>如果指令是一条A指令，在这种情况下，CPU会取出数据值，即这条指令中所谓的15位的“x”，然后将其放入A寄存器中。</li>
<li>如果指令的右侧(xxx&#x3D;M)包含 “M”，这个值将从 “inM” 读取。</li>
<li>如果指令的左侧(M&#x3D;xxx)包含 “M”，那么 ALU 的输出将通过 “outM” 输出，并且 “writeM” 位会→1。</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414131522436.png" alt="image-20250414131522436"></p>
<ul>
<li>看看CPU如何处理跳转指令</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414131732348.png" alt="image-20250414131732348"></p>
<h2 id="Memory-1"><a href="#Memory-1" class="headerlink" title="Memory"></a>Memory</h2><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414131810280.png" alt="image-20250414131810280"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414131908596.png" alt="image-20250414131908596"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414131927630.png" alt="image-20250414131927630"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414132122759.png" alt="image-20250414132122759"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414132409978.png" alt="image-20250414132409978"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414132553181.png" alt="image-20250414132553181"></p>
<ul>
<li><p>指令存储器 Instruction Memory  (ROM：Read - Only Memory）</p>
</li>
<li><p>在计算机运行之前，需要将<strong>编写好的 Hack 程序数据固化到 ROM32K 芯片中</strong>。</p>
</li>
<li><p>程序中的每一条指令都按照一定的顺序和格式存储在 ROM 的不同存储单元中，每个存储单元都有唯一对应的地址。</p>
</li>
<li><p><strong>在 Hack 计算机运行时，程序计数器（PC）会不断地向 ROM 的地址端口提供地址，ROM 根据这些地址输出相应的指令，然后 CPU 从 ROM 的输出中获取指令并执行，从而实现整个程序的运行。</strong></p>
<ul>
<li>例如，当 PC 输出地址为 0 时，ROM 会从地址为 0 的存储单元中取出对应的 Hack 指令，传递给 CPU 去执行，然后 PC 再递增，指向下一个地址，ROM 又输出下一条指令，如此循环，使得程序能够按顺序执行。</li>
</ul>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414132654354.png" alt="image-20250414132654354"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414132729661.png" alt="image-20250414132729661"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414132829344.png" alt="image-20250414132829344"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414132836410.png" alt="image-20250414132836410"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414133500747.png" alt="image-20250414133500747"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414133505468.png" alt="image-20250414133505468"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414133540257.png" alt="image-20250414133540257"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414133545883.png" alt="image-20250414133545883"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414133551712.png" alt="image-20250414133551712"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414133828858.png" alt="image-20250414133828858"></p>
<hr>
<h1 id="5-5-code"><a href="#5-5-code" class="headerlink" title="5.5 code"></a>5.5 code</h1><h2 id="RAM16K，Screen，Keyboard"><a href="#RAM16K，Screen，Keyboard" class="headerlink" title="RAM16K，Screen，Keyboard"></a>RAM16K，Screen，Keyboard</h2><blockquote>
<p>background</p>
</blockquote>
<ul>
<li><p><strong>8K &#x3D; 2的13次方。16K &#x3D; 2的14次方。</strong></p>
</li>
<li><p><strong>address[15] 表示 address 是一个 16 位的信号。</strong>address[15] 是第 1 位，<strong>address[0] 就是第 16 位。</strong></p>
</li>
<li><p><strong>RAM16K 的地址范围</strong>:**(16K)**（0到16383)需要 14 位地址来唯一标识每个存储单元，即 address[0..13] 这 14 位地址。</p>
</li>
<li><p><strong>Screen 的地址范围</strong>：**(8K)**（16384-24575）需要使用 13 位地址（address[0..12]）就可以满足其寻址需求。</p>
</li>
<li><p>可以明显看出，一个地址如果在0-16383内，它就属于 RAM16K 的地址空间；如果在16384-24575内，它就属于 Screen 的地址空间。所以<strong>它们的地址是分开的，没有重合。</strong></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHIP RAM16K &#123;</span><br><span class="line">    IN in[16], load, address[14];</span><br><span class="line">    OUT out[16];</span><br><span class="line">    // RAM16K是一个存储器，由16千个16-bit寄存器组成。</span><br><span class="line">    // 每次输入一个16位的数，RAM16K会根据其address决定将其存储到哪个位置。</span><br><span class="line">    // 具体的地址决定方法是：根据address的高2位（address[12..13]）选择一个4K的存储块，</span><br><span class="line">    // 然后根据低12位（address[0..11]）在所选的4K块内确定具体的存储位置。（以此类推，找到the only one）</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    DMux4Way(in = load,sel = address[12..13],a = a,b = b,c = c,d = d);</span><br><span class="line">  </span><br><span class="line">    RAM4K(in=in , load=a , address=address[0..11] , out=outa );</span><br><span class="line">    RAM4K(in=in , load=b , address=address[0..11] , out=outb );</span><br><span class="line">    RAM4K(in=in , load=c , address=address[0..11] , out=outc );</span><br><span class="line">    RAM4K(in=in , load=d , address=address[0..11] , out=outd );</span><br><span class="line">    </span><br><span class="line">    Mux4Way16(a=outa , b=outb , c=outc , d=outd , sel=address[12..13] , out=out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHIP Screen &#123;</span><br><span class="line"></span><br><span class="line">    IN  in[16],    // what to write</span><br><span class="line">    load,          // write-enable bit</span><br><span class="line">    address[13];   // where to read/write</span><br><span class="line">    OUT out[16];   // Screen value at the given address</span><br><span class="line"></span><br><span class="line">    BUILTIN Screen;</span><br><span class="line">    CLOCKED in, load;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHIP Keyboard&#123;</span><br><span class="line">    OUT out[16];</span><br><span class="line">    BUILTIN keyboard;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Memory-2"><a href="#Memory-2" class="headerlink" title="Memory"></a>Memory</h2><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250415180524.jpg"  />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHIP Memory &#123;</span><br><span class="line">    IN in[16], load, address[15];</span><br><span class="line">    OUT out[16];</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    DMux4Way(in=load, sel=address[13..14], a=ram1, b=ram2, c=scrn, d=keybd); // 1314？？</span><br><span class="line">    Or(a=ram1 , b=ram2, out=ram3);</span><br><span class="line">    RAM16K(in=in, load=ram3, address=address[0..13], out=ram );</span><br><span class="line">    Screen(in=in, load=scrn, address=address[0..12], out=sc);</span><br><span class="line">    Keyboard(out=kbd);</span><br><span class="line">    Mux4Way16(a=ram, b=ram, c=sc, d=kbd, sel=address[13..14], out=out);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414122921132.png" alt="image-20250414122921132"  />

<img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414123504372.png" alt="image-20250414123504372"  />



<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408152923618.png" alt="image-20250408152923618"  /><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250406111659071.png" alt="image-20250406111659071" style="zoom: 80%;" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHIP CPU &#123;</span><br><span class="line"></span><br><span class="line">    IN  inM[16],         // M value input  (M = contents of RAM[A])</span><br><span class="line">        instruction[16], // Instruction for execution</span><br><span class="line">        reset;           // Signals whether to re-start the current</span><br><span class="line">                         // program (reset==1) or continue executing</span><br><span class="line">                         // the current program (reset==0).</span><br><span class="line"></span><br><span class="line">    OUT outM[16],        // M value output</span><br><span class="line">        writeM,          // Write to M? </span><br><span class="line">        addressM[15],    // Address in data memory (of M)</span><br><span class="line">        pc[15];          // address of next instruction</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">	// A-register 可能执行 A/C 指令（但是c指令只能从alu_out处而来，其实alu本身就能接收指令的，所以第一关下部不给c进只能a进是有原因的）</span><br><span class="line">    // A instruction</span><br><span class="line">    // @3001</span><br><span class="line">    // [0]000101110111001</span><br><span class="line">     </span><br><span class="line">     // 用途一：将常数输入计算机</span><br><span class="line">     // 用途二：为 C - 指令提供目标数据内存单元的地址（放入 A 寄存器）</span><br><span class="line">     // 用途三：为跳转指令提供目的地址</span><br><span class="line">    </span><br><span class="line">    Not(in=instruction[15] , out=notop ); </span><br><span class="line">    Mux16(a=aluOut, b=instruction , sel=notop , out=q1 ); 	 </span><br><span class="line">    Or(a=instruction[5] , b=notop , out=intoA );  </span><br><span class="line">    ARegister(in=q1, load=intoA, out=A,out[0..14]=addressM); // 同时储存并输出addressM </span><br><span class="line">    		</span><br><span class="line">    And(a=instruction[15] , b=instruction[12] , out=AMSwitch ); </span><br><span class="line">    Mux16(a=A , b=inM , sel=AMSwitch , out=AM );</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    // C instruction</span><br><span class="line">    // i  _  _  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3</span><br><span class="line">    // 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00</span><br><span class="line">    // ins[5]是C指令中的dest指令(=1表示去A寄存器)</span><br><span class="line">    // ins[12]是a=0/1，用于在 C指令中 决定是使用 A寄存器的值（A）还是内存的值（inM）（A指令时直接用inM了，有sel a通过不了，inM可以）</span><br><span class="line">    </span><br><span class="line">    And(a=instruction[15] , b=instruction[4] , out=intoD );</span><br><span class="line">    DRegister(in=aluOut , load=intoD , out=D ); // D 寄存器：for数据暂存</span><br></pre></td></tr></table></figure>

<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250415200024.jpg"></p>
<img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250408153509769.png" alt="image-20250408153509769"  />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> // ALU</span><br><span class="line">    // ALU takes input from DRegister and from ARegister or inM</span><br><span class="line">    // addressM 是用来确定从哪里读取数据，而 inM 是实际读取到的数据。</span><br><span class="line">    // ALU的zx,nx,zy,ny,f,no这些控制信号是由操作码 c1 - c6 经过一定逻辑转换得到的，所以C指令进不去A寄存器，但是ALU也是能获得其操作码进行操作的。⭐</span><br><span class="line">    ALU(x=D, y=AM, out=aluOut, out=outM,</span><br><span class="line">        zx=instruction[11],</span><br><span class="line">        nx=instruction[10],</span><br><span class="line">        zy=instruction[9],</span><br><span class="line">        ny=instruction[8],</span><br><span class="line">        f=instruction[7],</span><br><span class="line">        no=instruction[6],</span><br><span class="line">        zr=zrOut,</span><br><span class="line">        ng=ngOut</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // writeM</span><br><span class="line">    And(a=instruction[15] , b=instruction[3] , out=writeM );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// PC </span><br><span class="line">    // PC 的 load设置⭐</span><br><span class="line">    Not(in=ngOut , out=pos );</span><br><span class="line">    Not(in=zrOut , out=nzr );</span><br><span class="line"></span><br><span class="line">    // 处理JGT条件(&gt;0 jump)</span><br><span class="line">    And(a=instruction[15] , b=instruction[0] , out=jgt );</span><br><span class="line">    And(a=pos , b=nzr , out=posnzr );</span><br><span class="line">    And(a=jgt , b=posnzr , out=ld1 ); </span><br><span class="line"></span><br><span class="line">    // 处理JEQ条件(=0 jump)</span><br><span class="line">    And(a=instruction[15] , b=instruction[1] , out=jeq );</span><br><span class="line">    And(a=jeq , b=zrOut , out=ld2 ); </span><br><span class="line"></span><br><span class="line">    // 处理JLT条件(&lt;0 jump)</span><br><span class="line">    And(a=instruction[15] , b=instruction[2] , out=jlt );</span><br><span class="line">    And(a=jlt , b=ngOut , out=ld3 );</span><br><span class="line"></span><br><span class="line">    //合并跳转条件，生成最终的load</span><br><span class="line">    Or(a=ld1 , b=ld2 , out=ldt ); </span><br><span class="line">    Or(a=ld3 , b=ldt , out=loadd );</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    PC(in=A , load=loadd , inc=true , reset=reset , out[0..14]=pc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 内存根据 PC 提供的地址，将对应地址处的指令输出为 instruction。</span><br><span class="line">// 但这并不是 PC 输出后被写入 RAM ，而是 PC 提供一个地址索引，内存根据这个索引将存储在该地址的指令数据输出。</span><br></pre></td></tr></table></figure>

<img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414193356928.png" alt="image-20250414193356928"  />

<img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414130853170.png" alt="image-20250414130853170"  />

<h2 id="Computer"><a href="#Computer" class="headerlink" title="Computer"></a>Computer</h2><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250414133828858.png" alt="image-20250414133828858"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHIP Computer &#123;</span><br><span class="line"></span><br><span class="line">    IN reset;</span><br><span class="line"></span><br><span class="line">    PARTS:</span><br><span class="line">    ROM32K(address=pc , out=instruction );</span><br><span class="line">    CPU(inM=inM, instruction=instruction , reset=reset , outM=outM , writeM=writeM , addressM=addressM , pc=pc );</span><br><span class="line">    Memory(in=outM , load=writeM , address=addressM , out=inM );</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>nand2tetris</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello world2</title>
    <url>/2025/04/19/text/</url>
    <content><![CDATA[<h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/Rplot05.png"></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
  </entry>
  <entry>
    <title>proj6</title>
    <url>/2025/05/04/nand2tetris-proj6-final/</url>
    <content><![CDATA[<h3 id="6-1-Assembler"><a href="#6-1-Assembler" class="headerlink" title="6.1 Assembler"></a>6.1 Assembler</h3><h4 id="P5-review"><a href="#P5-review" class="headerlink" title="P5 review"></a>P5 review</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250415234251717.png" alt="image-20250415234251717"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250415234356010.png" alt="image-20250415234356010"></p>
<h4 id="What-we-need-an-Assembler"><a href="#What-we-need-an-Assembler" class="headerlink" title="What we need: an Assembler"></a>What we need: an Assembler</h4><ul>
<li>汇编器：把汇编语言，转化成机器语言的一个sofe ware（the first sofeware layer above the hard ware)</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416121246454.png" alt="image-20250416121246454"></p>
<h4 id="A-fun-way-to-look-at-Assembler"><a href="#A-fun-way-to-look-at-Assembler" class="headerlink" title="A fun way to look at Assembler"></a>A fun way to look at Assembler</h4><ul>
<li>We already have our first computer. It is <strong>difficult</strong> <strong>to write</strong> machine language.</li>
<li>So we can bulid our second computer(is acutally a sofeware haha), which is called Assembler ( can translate assembly language to machine language）</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416121549820.png" alt="image-20250416121549820"></p>
<h4 id="Basic-Assembler-Logic"><a href="#Basic-Assembler-Logic" class="headerlink" title="Basic Assembler Logic"></a>Basic Assembler Logic</h4><h5 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h5><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416121915773.png" alt="image-20250416121915773"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416122001311.png" alt="image-20250416122001311"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416122058367.png" alt="image-20250416122058367"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416122146818.png" alt="image-20250416122146818"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416122255261.png" alt="image-20250416122255261"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416122332192.png" alt="image-20250416122332192"></p>
<h5 id="other"><a href="#other" class="headerlink" title="other"></a>other</h5><ul>
<li>We have something to deal with - the Symbols.</li>
<li>We have two kinds of symbols: <strong>Labels and Variables.</strong></li>
<li><strong>We need replace their names with address</strong></li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416122505756.png" alt="image-20250416122505756"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416125136494.png" alt="image-20250416125136494"></p>
<h5 id="last-problems"><a href="#last-problems" class="headerlink" title="last problems"></a>last problems</h5><ul>
<li>Sometime we need the labels before we define them.</li>
<li>I like the second solution.</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416125537937.png" alt="image-20250416125537937"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416123427577.png" alt="image-20250416123427577"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416123436546.png" alt="image-20250416123436546"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416123442487.png" alt="image-20250416123442487"></p>
<hr>
<h3 id="6-2-The-translator’s-challenge-preparation"><a href="#6-2-The-translator’s-challenge-preparation" class="headerlink" title="6.2  The translator’s challenge ( preparation )"></a>6.2  The translator’s challenge ( <strong>preparation</strong> )</h3><ul>
<li>We will soon actually build our Assembler.</li>
<li>To start with, we need to know the challenges we may face.</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416125952491.png" alt="image-20250416125952491"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416130030648.png" alt="image-20250416130030648"></p>
<ul>
<li>So, we need to know the syntax of Hack language</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416130212289.png" alt="image-20250416130212289"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416130224972.png" alt="image-20250416130224972"></p>
<ul>
<li>Those are all the challenges.</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416130423237.png" alt="image-20250416130423237"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416130432295.png" alt="image-20250416130432295"></p>
<ul>
<li>Let’s deal with them one by one.</li>
<li>Symbols are difficult, so we will deal with them later. ( <strong>Summiting the mountain may be easier from the other side than from the starting side.</strong> )</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416130543505.png" alt="image-20250416130543505"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416130650303.png" alt="image-20250416130650303"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416130754099.png" alt="image-20250416130754099"></p>
<ul>
<li><strong>The plan ahead</strong></li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416130859437.png" alt="image-20250416130859437"></p>
<hr>
<h3 id="6-3-Translating-challenge-1-A-C-Struction"><a href="#6-3-Translating-challenge-1-A-C-Struction" class="headerlink" title="6.3 Translating challenge 1 :  A&#x2F;C  Struction"></a>6.3 Translating challenge 1 :  A&#x2F;C  Struction</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416134201668.png" alt="image-20250416134201668"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416134739093.png" alt="image-20250416134739093"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416135103314.png" alt="image-20250416135103314"></p>
<hr>
<h3 id="6-4-Translating-challenge-1-Struction-with-Symbols"><a href="#6-4-Translating-challenge-1-Struction-with-Symbols" class="headerlink" title="6.4 Translating challenge 1 :  Struction with Symbols"></a>6.4 Translating challenge 1 :  Struction with Symbols</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416135923947.png" alt="image-20250416135923947"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416140121297.png" alt="image-20250416140121297"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416140447481.png" alt="image-20250416140447481"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416140743441.png" alt="image-20250416140743441"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416141031541.png" alt="image-20250416141031541"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416141210069.png" alt="image-20250416141210069"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416141338475.png" alt="image-20250416141338475"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416141555469.png" alt="image-20250416141555469"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416141914934.png" alt="image-20250416141914934"></p>
<hr>
<h3 id="6-5-Use-Java-to-build-Assembler"><a href="#6-5-Use-Java-to-build-Assembler" class="headerlink" title="6.5 Use Java to build Assembler"></a>6.5 Use Java to build Assembler</h3><h4 id="三个步骤"><a href="#三个步骤" class="headerlink" title="三个步骤"></a>三个步骤</h4><ul>
<li>第一步：解析命令<ul>
<li>读取文件一个个获取命令，看是什么命令</li>
</ul>
</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416144431385.png" alt="image-20250416144431385"></p>
<ul>
<li>第二步：</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416142427353.png" alt="image-20250416142427353"></p>
<ul>
<li>第三步：处理符号</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416142441071.png" alt="image-20250416142441071"></p>
<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><ul>
<li>唯一需要了解的就是输入语言的格式，以及它如何分解成不同的组件</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416142533923.png" alt="image-20250416142533923"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416142721990.png" alt="image-20250416142721990"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416142818023.png" alt="image-20250416142818023"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416143024166.png" alt="image-20250416143024166"></p>
<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416143153847.png" alt="image-20250416143153847"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416143320447.png" alt="image-20250416143320447"></p>
<h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><ul>
<li>唯一要做的：保存符号和内存地址之间的关联</li>
</ul>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416143506189.png" alt="image-20250416143506189"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416143618139.png" alt="image-20250416143618139"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416143741218.png" alt="image-20250416143741218"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416143841714.png" alt="image-20250416143841714"></p>
<h4 id="总的来说"><a href="#总的来说" class="headerlink" title="总的来说"></a>总的来说</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416144043853.png" alt="image-20250416144043853"></p>
<hr>
<h3 id="6-6-Proj-6-Overview"><a href="#6-6-Proj-6-Overview" class="headerlink" title="6.6 Proj 6 Overview"></a>6.6 Proj 6 Overview</h3><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416145841739.png" alt="image-20250416145841739"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416150048896.png" alt="image-20250416150048896"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416150329421.png" alt="image-20250416150329421"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416150526237.png" alt="image-20250416150526237"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416150630531.png" alt="image-20250416150630531"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416150707107.png" alt="image-20250416150707107"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416151522621.png" alt="image-20250416151522621"></p>
<p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416151656158.png" alt="image-20250416151656158"></p>
<h3 id="6-7-code"><a href="#6-7-code" class="headerlink" title="6.7 code"></a>6.7 code</h3><h4 id="Parser"><a href="#Parser" class="headerlink" title="Parser"></a>Parser</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parser</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Encapsulates access to the input code. Reads an assembly language command, </span></span><br><span class="line"><span class="string">    parses it, and provides convenient access to the command’s components </span></span><br><span class="line"><span class="string">    (fields and symbols). In addition, removes all white space and comments.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_file</span>):</span><br><span class="line">        <span class="variable language_">self</span>.file_name = in_file</span><br><span class="line">        <span class="variable language_">self</span>.prog_text = <span class="variable language_">self</span>.read_asm(in_file)</span><br><span class="line">        <span class="variable language_">self</span>.prog_num = <span class="built_in">len</span>(<span class="variable language_">self</span>.prog_text)</span><br><span class="line">        <span class="variable language_">self</span>.cmd_next = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.cmd_text = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_asm</span>(<span class="params">self, input_file</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Read .asm file from disk, return list of strings for commands only</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        prog_text = []</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(input_file) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> fp.readlines():</span><br><span class="line">                <span class="comment"># 去除注释和空白行</span></span><br><span class="line">                line = line.strip()</span><br><span class="line">                <span class="keyword">if</span> line <span class="keyword">and</span> <span class="keyword">not</span> line.startswith(<span class="string">&#x27;//&#x27;</span>):</span><br><span class="line">                    <span class="comment"># 去除行末的注释</span></span><br><span class="line">                    line = line.split(<span class="string">&#x27;//&#x27;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">                    prog_text.append(line)</span><br><span class="line">        <span class="keyword">return</span> prog_text</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset_read</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Reset reading for second pass</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.cmd_next = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.cmd_text = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_more_commands</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Are there more commands in the input?</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.cmd_next &lt; <span class="variable language_">self</span>.prog_num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">advance</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Reads the next command from the input and makes it the current command. </span></span><br><span class="line"><span class="string">        Should be called only if hasMoreCommands() is true. </span></span><br><span class="line"><span class="string">        Initially there is no current command. </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.has_more_commands():</span><br><span class="line">            <span class="variable language_">self</span>.cmd_text = <span class="variable language_">self</span>.prog_text[<span class="variable language_">self</span>.cmd_next]</span><br><span class="line">            <span class="variable language_">self</span>.cmd_next += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">command_type</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the type of the current command:</span></span><br><span class="line"><span class="string">        m A_COMMAND for @Xxx where Xxx is either a symbol or a decimal number</span></span><br><span class="line"><span class="string">        m C_COMMAND for dest=comp;jump</span></span><br><span class="line"><span class="string">        m L_COMMAND (actually, pseudo-command) for (Xxx) where Xxx is a symbol.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.cmd_text.startswith(<span class="string">&#x27;(&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;L_COMMAND&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.cmd_text.startswith(<span class="string">&#x27;@&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;A_COMMAND&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;C_COMMAND&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">symbol</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the symbol or decimal Xxx of the current command @Xxx or (Xxx). </span></span><br><span class="line"><span class="string">        Should be called only when commandType() is A_COMMAND or L_COMMAND.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.command_type() == <span class="string">&#x27;L_COMMAND&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.cmd_text[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.command_type() == <span class="string">&#x27;A_COMMAND&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.cmd_text[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dest</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the dest mnemonic in the current C-command (8 possibilities). </span></span><br><span class="line"><span class="string">        Should be called only when commandType() is C_COMMAND.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.command_type() == <span class="string">&#x27;C_COMMAND&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;=&#x27;</span> <span class="keyword">in</span> <span class="variable language_">self</span>.cmd_text:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">self</span>.cmd_text.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">comp</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the comp mnemonic in the current C-command (28 possibilities). </span></span><br><span class="line"><span class="string">        Should be called only when commandType() is C_COMMAND.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.command_type() == <span class="string">&#x27;C_COMMAND&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;=&#x27;</span> <span class="keyword">in</span> <span class="variable language_">self</span>.cmd_text:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">self</span>.cmd_text.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;;&#x27;</span> <span class="keyword">in</span> <span class="variable language_">self</span>.cmd_text:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">self</span>.cmd_text.split(<span class="string">&#x27;;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jump</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the jump mnemonic in the current C-command (8 possibilities). </span></span><br><span class="line"><span class="string">        Should be called only when commandType() is C_COMMAND.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;;&#x27;</span> <span class="keyword">in</span> <span class="variable language_">self</span>.cmd_text:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.cmd_text.split(<span class="string">&#x27;;&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p><img src="https://dbddbdbdbd.oss-cn-qingdao.aliyuncs.com/image-20250416134739093.png" alt="image-20250416134739093"></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Code</span>:</span><br><span class="line">	<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	Translates Hack assembly language mnemonics into binary codes.</span></span><br><span class="line"><span class="string">	&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.dest_list = [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;MD&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;AM&#x27;</span>, <span class="string">&#x27;AD&#x27;</span>, <span class="string">&#x27;AMD&#x27;</span>]</span><br><span class="line">        <span class="variable language_">self</span>.jump_list = [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;JGT&#x27;</span>, <span class="string">&#x27;JEQ&#x27;</span>, <span class="string">&#x27;JGE&#x27;</span>, <span class="string">&#x27;JLT&#x27;</span>, <span class="string">&#x27;JNE&#x27;</span>, <span class="string">&#x27;JLE&#x27;</span>, <span class="string">&#x27;JMP&#x27;</span>]</span><br><span class="line">        <span class="variable language_">self</span>.comp_dict = &#123;</span><br><span class="line">            <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;0101010&#x27;</span>, <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;0111111&#x27;</span>, <span class="string">&#x27;-1&#x27;</span>: <span class="string">&#x27;0111010&#x27;</span>, <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;0001100&#x27;</span>, </span><br><span class="line">		   <span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;0110000&#x27;</span>, <span class="string">&#x27;!D&#x27;</span>: <span class="string">&#x27;0001101&#x27;</span>, <span class="string">&#x27;!A&#x27;</span>: <span class="string">&#x27;0110001&#x27;</span>, <span class="string">&#x27;-D&#x27;</span>: <span class="string">&#x27;0001111&#x27;</span>, </span><br><span class="line">		   <span class="string">&#x27;-A&#x27;</span>: <span class="string">&#x27;0110011&#x27;</span>, <span class="string">&#x27;D+1&#x27;</span>: <span class="string">&#x27;0011111&#x27;</span>, <span class="string">&#x27;A+1&#x27;</span>: <span class="string">&#x27;0110111&#x27;</span>, <span class="string">&#x27;D-1&#x27;</span>: <span class="string">&#x27;0001110&#x27;</span>, </span><br><span class="line">		   <span class="string">&#x27;A-1&#x27;</span>: <span class="string">&#x27;0110010&#x27;</span>, <span class="string">&#x27;D+A&#x27;</span>: <span class="string">&#x27;0000010&#x27;</span>, <span class="string">&#x27;D-A&#x27;</span>: <span class="string">&#x27;0010011&#x27;</span>, <span class="string">&#x27;A-D&#x27;</span>: <span class="string">&#x27;0000111&#x27;</span>, </span><br><span class="line">		   <span class="string">&#x27;D&amp;A&#x27;</span>: <span class="string">&#x27;0000000&#x27;</span>, <span class="string">&#x27;D|A&#x27;</span>: <span class="string">&#x27;0010101&#x27;</span>, <span class="string">&#x27;M&#x27;</span>: <span class="string">&#x27;1110000&#x27;</span>, <span class="string">&#x27;!M&#x27;</span>: <span class="string">&#x27;1110001&#x27;</span>, </span><br><span class="line">		   <span class="string">&#x27;-M&#x27;</span>: <span class="string">&#x27;1110011&#x27;</span>, <span class="string">&#x27;M+1&#x27;</span>: <span class="string">&#x27;1110111&#x27;</span>, <span class="string">&#x27;M-1&#x27;</span>: <span class="string">&#x27;1110010&#x27;</span>, <span class="string">&#x27;D+M&#x27;</span>: <span class="string">&#x27;1000010&#x27;</span>, </span><br><span class="line">		   <span class="string">&#x27;D-M&#x27;</span>: <span class="string">&#x27;1010011&#x27;</span>, <span class="string">&#x27;M-D&#x27;</span>: <span class="string">&#x27;1000111&#x27;</span>, <span class="string">&#x27;D&amp;M&#x27;</span>: <span class="string">&#x27;1000000&#x27;</span>, <span class="string">&#x27;D|M&#x27;</span>: <span class="string">&#x27;1010101&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">a_code</span>(<span class="params">self, val</span>): <span class="comment"># ⭐</span></span><br><span class="line">		<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将 A 指令的数值或符号地址转换为 16 位二进制</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;0:b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(val)).zfill(<span class="number">16</span>)</span><br><span class="line">    	<span class="comment"># &#x27;&#123;0:b&#125;&#x27; 是一个格式化字符串，其中 &#123;0&#125; 是一个占位符，表示要插入的值的位置，b 表示将值格式化为二进制形式。</span></span><br><span class="line">        <span class="comment"># zfill 是字符串的一个方法，用于在字符串的左边填充零，直到字符串的长度达到指定的长度。在这里，指定的长度是 16。</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">c_code</span>(<span class="params">self, comp_str, dest_str, jump_str</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">		Create string for c-code</span></span><br><span class="line"><span class="string">		&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;111&#x27;</span> +<span class="variable language_">self</span>.comp(comp_str) + <span class="variable language_">self</span>.dest(dest_str) + <span class="variable language_">self</span>.jump(jump_str)</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">dest</span>(<span class="params">self, dest_str</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">		Returns the binary code of the dest mnemonic.</span></span><br><span class="line"><span class="string">		&quot;&quot;&quot;</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27;&#123;0:b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.dest_list.index(dest_str)).zfill(<span class="number">3</span>)</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">comp</span>(<span class="params">self, comp_str</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">		Returns the binary code of the comp mnemonic.</span></span><br><span class="line"><span class="string">		&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.comp_dict[comp_str]</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">jump</span>(<span class="params">self, jump_str</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">		Returns the binary code of the jump mnemonic.</span></span><br><span class="line"><span class="string">		&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;0:b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.jump_list.index(jump_str)).zfill(<span class="number">3</span>)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h4 id="SymbolTable"><a href="#SymbolTable" class="headerlink" title="SymbolTable"></a>SymbolTable</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SymbolTable</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Keeps a correspondence between symbolic labels and numeric addresses.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 生成一个包含 16 个键值对的字典，键是形如 R0 到 R15 的字符串，值分别是对应的整数 0 到 15 。</span></span><br><span class="line">        <span class="variable language_">self</span>.table = &#123;<span class="string">&#x27;R&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i): i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)&#125;</span><br><span class="line">        <span class="variable language_">self</span>.table.update(&#123;<span class="string">&#x27;SP&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;LCL&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;ARG&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;THIS&#x27;</span>: <span class="number">3</span>, </span><br><span class="line">                           <span class="string">&#x27;THAT&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;SCREEN&#x27;</span>: <span class="number">16384</span>, <span class="string">&#x27;KBD&#x27;</span>: <span class="number">24576</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_entry</span>(<span class="params">self, symbol, address</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        向符号表中添加新的符号地址映射</span></span><br><span class="line"><span class="string">        :param symbol: 符号</span></span><br><span class="line"><span class="string">        :param address: 地址</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.contains(symbol):</span><br><span class="line">            <span class="variable language_">self</span>.table[symbol] = address</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">contains</span>(<span class="params">self, symbol</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Does the symbol table contain the given symbol?</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> symbol <span class="keyword">in</span> <span class="variable language_">self</span>.table.keys()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_address</span>(<span class="params">self, symbol</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the address associated with the symbol.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.table[symbol]</span><br></pre></td></tr></table></figure>

<h4 id="Assembler"><a href="#Assembler" class="headerlink" title="Assembler"></a>Assembler</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> parser <span class="keyword">import</span> Parser</span><br><span class="line"><span class="keyword">from</span> code <span class="keyword">import</span> Code</span><br><span class="line"><span class="keyword">from</span> symbol_table <span class="keyword">import</span> SymbolTable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Assembler</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    汇编器类，负责将汇编文件转换为机器码文件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, debug=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.symbol_table = SymbolTable()</span><br><span class="line">        <span class="variable language_">self</span>.code = Code()</span><br><span class="line">        <span class="variable language_">self</span>.parser = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.debug = debug</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">debug_print</span>(<span class="params">self, print_string</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.debug:</span><br><span class="line">            <span class="built_in">print</span>(print_string)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">assemble</span>(<span class="params">self, input_file</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        主汇编函数，执行两遍扫描并生成输出文件</span></span><br><span class="line"><span class="string">        :param input_file: 输入的汇编文件路径</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        start = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查输入文件是否存在且是 .asm 文件</span></span><br><span class="line">        <span class="keyword">assert</span> os.path.exists(input_file), <span class="string">f&quot;文件 <span class="subst">&#123;input_file&#125;</span> 不存在&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> input_file.endswith(<span class="string">&#x27;.asm&#x27;</span>), <span class="string">&quot;输入文件必须是 .asm 格式&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.debug_print(<span class="string">f&#x27;Converting <span class="subst">&#123;input_file&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建解析器实例</span></span><br><span class="line">        <span class="variable language_">self</span>.parser = Parser(input_file)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录各阶段时间</span></span><br><span class="line">        check_1 = time.time()</span><br><span class="line">        <span class="variable language_">self</span>.debug_print(<span class="string">f&#x27;Parsed file in <span class="subst">&#123;<span class="built_in">round</span>(check_1 - start, <span class="number">5</span>):<span class="number">.5</span>f&#125;</span> secs&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.pass_1()</span><br><span class="line">        check_2 = time.time()</span><br><span class="line">        <span class="variable language_">self</span>.debug_print(<span class="string">f&#x27;First pass in <span class="subst">&#123;<span class="built_in">round</span>(check_2 - check_1, <span class="number">5</span>):<span class="number">.5</span>f&#125;</span> secs&#x27;</span>)</span><br><span class="line">        out_text = <span class="variable language_">self</span>.pass_2()</span><br><span class="line">        check_3 = time.time()</span><br><span class="line">        <span class="variable language_">self</span>.debug_print(<span class="string">f&#x27;Second pass in <span class="subst">&#123;<span class="built_in">round</span>(check_3 - check_2, <span class="number">5</span>):<span class="number">.5</span>f&#125;</span> secs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成输出文件名</span></span><br><span class="line">        out_file = <span class="variable language_">self</span>.parser.file_name.split(<span class="string">&#x27;.asm&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.hack&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 写入输出文件</span></span><br><span class="line">        <span class="variable language_">self</span>.write_output(out_file, out_text)</span><br><span class="line">        <span class="variable language_">self</span>.debug_print(<span class="string">f&#x27;Wrote <span class="subst">&#123;out_file&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.debug_print(<span class="string">f&#x27;Ran in <span class="subst">&#123;<span class="built_in">round</span>(time.time() - start, <span class="number">5</span>):<span class="number">.5</span>f&#125;</span> secs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pass_1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        第一遍扫描：处理标签符号，记录标签地址</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        asm_line = <span class="number">0</span>  <span class="comment"># 记录当前处理的指令行号（非标签行）</span></span><br><span class="line">        <span class="keyword">while</span> <span class="variable language_">self</span>.parser.has_more_commands():</span><br><span class="line">            <span class="variable language_">self</span>.parser.advance()</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.parser.command_type() == <span class="string">&#x27;L_COMMAND&#x27;</span>:  <span class="comment"># 标签指令</span></span><br><span class="line">                symbol = <span class="variable language_">self</span>.parser.symbol()</span><br><span class="line">                <span class="variable language_">self</span>.symbol_table.add_entry(symbol, asm_line)  <span class="comment"># 标签地址为当前行号（后续指令的行号）</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 非标签指令，行号递增</span></span><br><span class="line">                asm_line += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pass_2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        第二遍扫描：处理变量符号，生成机器码</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        out_text = []</span><br><span class="line">        var_count = <span class="number">16</span>  <span class="comment"># 变量地址从 16 开始</span></span><br><span class="line">        <span class="variable language_">self</span>.parser.reset_read()  <span class="comment"># 重置解析器到文件开头</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="variable language_">self</span>.parser.has_more_commands():</span><br><span class="line">            <span class="variable language_">self</span>.parser.advance()</span><br><span class="line">            cmd_type = <span class="variable language_">self</span>.parser.command_type()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cmd_type == <span class="string">&#x27;A_COMMAND&#x27;</span>:  <span class="comment"># 处理 A 指令</span></span><br><span class="line">                symbol = <span class="variable language_">self</span>.parser.symbol()</span><br><span class="line">                <span class="keyword">if</span> symbol.isdigit():  <span class="comment"># 符号是数字，直接转换</span></span><br><span class="line">                    out_text.append(<span class="variable language_">self</span>.code.a_code(symbol))</span><br><span class="line">                <span class="keyword">else</span>:  <span class="comment"># 符号是变量或标签</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.symbol_table.contains(symbol):  <span class="comment"># 符号未定义，添加到符号表</span></span><br><span class="line">                        <span class="variable language_">self</span>.symbol_table.add_entry(symbol, var_count)</span><br><span class="line">                        var_count += <span class="number">1</span></span><br><span class="line">                    <span class="comment"># 获取符号地址并转换为二进制</span></span><br><span class="line">                    address = <span class="variable language_">self</span>.symbol_table.get_address(symbol)</span><br><span class="line">                    out_text.append(<span class="variable language_">self</span>.code.a_code(address))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> cmd_type == <span class="string">&#x27;C_COMMAND&#x27;</span>:  <span class="comment"># 处理 C 指令</span></span><br><span class="line">                comp = <span class="variable language_">self</span>.parser.comp()</span><br><span class="line">                dest = <span class="variable language_">self</span>.parser.dest()</span><br><span class="line">                jump = <span class="variable language_">self</span>.parser.jump()</span><br><span class="line">                out_text.append(<span class="variable language_">self</span>.code.c_code(comp, dest, jump))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out_text</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write_output</span>(<span class="params">self, out_file, out_text</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将生成的机器码写入输出文件，每行一个 16 位二进制</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(out_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="keyword">for</span> binary <span class="keyword">in</span> out_text:</span><br><span class="line">                fp.write(<span class="string">f&quot;<span class="subst">&#123;binary&#125;</span>\n&quot;</span>)  <span class="comment"># 使用 \n 换行，确保每行一条指令</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.导入模块</span></span><br><span class="line"><span class="keyword">import</span> argparse <span class="comment"># Python 标准库中用于处理命令行参数的模块</span></span><br><span class="line"><span class="keyword">from</span> assembler <span class="keyword">import</span> Assembler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.创建命令行参数解析器</span></span><br><span class="line">parser = argparse.ArgumentParser(</span><br><span class="line">	prog=<span class="string">&quot;main.py&quot;</span>,</span><br><span class="line">	description=<span class="string">&quot;Convert a .asm file into .hack assembly file&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.添加命令行参数</span></span><br><span class="line">parser.add_argument(<span class="string">&quot;asm_path&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Path to .asm file to convert&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(</span><br><span class="line">	<span class="string">&quot;--debug&quot;</span>,</span><br><span class="line">	<span class="string">&quot;--d&quot;</span>,</span><br><span class="line">	action=<span class="string">&quot;store_true&quot;</span>,</span><br><span class="line">	default=<span class="literal">False</span>,</span><br><span class="line">	<span class="built_in">help</span>=<span class="string">&quot;Whether to print steps/timing (True) or not (False) DEFAULT: False&quot;</span>,</span><br><span class="line">	dest=<span class="string">&quot;debug&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.更新文档字符串</span></span><br><span class="line">__doc__ = <span class="string">&quot;\n&quot;</span> + parser.format_help()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.定义主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">	args = parser.parse_args()</span><br><span class="line">	a = Assembler(args.debug)</span><br><span class="line">	a.assemble(args.asm_path)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>nand2tetris</tag>
      </tags>
  </entry>
  <entry>
    <title>LOK</title>
    <url>/2025/04/11/%E5%9B%BE%E7%89%87%E5%90%8D%E5%AD%97/%E5%9B%BE%E7%89%87%E5%90%8D%E5%AD%972/</url>
    <content><![CDATA[<p><img src="https://picsum.photos/id/627/200/300" alt="图片名称八个字"></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
  </entry>
</search>
